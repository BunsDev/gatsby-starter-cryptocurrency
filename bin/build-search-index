#!/usr/bin/env node
const GithubSlugger = require('github-slugger')
const { readFileSync, readdirSync } = require('fs')
const { join, resolve } = require('path')
const jsyaml = require('js-yaml')
const createNodeId = require('gatsby/dist/utils/create-node-id')
const fs = require('fs')
const fileContentHelper = require('../src/lib/fileContentHelper')

var remark = require('remark')
var strip = require('strip-markdown')

const myContent = `{
  "data": {
    "allMarkdownRemark": {
      "edges": [
        {
          "node": {
            "fields": {
              "slug": "/current/analytics/"
            },
            "headings": [
              {
                "value": "Analytics"
              }
            ],
            "internal": {
              "contentDigest": "ce9b1e1041dac1c1e158cbc26be57f44",
              "content": "# Analytics\\n\\n**WIP**\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/api-documentation/daemon-http-rpc-api/"
            },
            "headings": [
              {
                "value": "Daemon HTTP RPC API"
              },
              {
                "value": "Installation"
              },
              {
                "value": "Interacting with the API"
              },
              {
                "value": "API endpoint example"
              },
              {
                "value": "Configuration and Instantiation"
              },
              {
                "value": "getheight"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "getinfo"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "gettransactions"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "getpeers"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "feeinfo"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "License"
              }
            ],
            "internal": {
              "contentDigest": "17c6d9406535418933e270e586885a08",
              "content": "# Daemon HTTP RPC API\\n\\nThe \`Catalyst\` daemon HTTP RPC is a HTTP server which provides additional information regarding network and daemon connections.\\n\\nCurrently, you can use the following official Turtle client bindings, they are totally compatible with our daemon:\\n\\n* [NodeJS](https://www.npmjs.com/package/turtlecoin-rpc)\\n* [PHP](https://github.com/turtlecoin/turtlecoin-rpc-php)\\n* [Python](https://github.com/turtlecoin/turtlecoin-rpc-python)\\n* [Go](https://github.com/turtlecoin/turtlecoin-rpc-go)\\n\\n## Installation\\n\\n\`\`\`js\\nnpm i turtlecoin-rpc\\n\`\`\`\\n\\n\`\`\`php\\ncomposer require turtlecoin/turtlecoin-rpc-php\\n\`\`\`\\n\\n\`\`\`python\\npip3 install turtlecoin\\n\`\`\`\\n\\n\`\`\`go\\ngo get github.com/turtlecoin/turtlecoin-rpc-go\\n\`\`\`\\n\\n## Interacting with the API\\n\\n### API endpoint example\\n\\n\`\`\`\\nhttp://localhost:17291\\n\`\`\`\\n\\n### Configuration and Instantiation\\n\\nTo start the Daemon JSON RPC API server at \`http://localhost:17291\`, run:\\n\\n\`catalystd --rpc-bind-port=17291\`\\n\\nTo make the server accessible from another computer, use the \`--rpc-bind-ip 0.0.0.0\` switch.\\n\\n\`catalystd --rpc-bind-ip=0.0.0.0 --rpc-bind-port=17291\`\\n\\nTo enable block explorer API access (like for \`getblocks\`, \`gettransactionpool\`, etc.), use the \`--enable-blockexplorer\` switch.\\n\\n\`catalystd --enable-blockexplorer\`\\n\\nThe above given switches can be combined to achieve remote access with block explorer methods as shown below.\\n\\n\`catalystd --enable-blockexplorer --rpc-bind-ip=0.0.0.0 --rpc-bind-port=17291\`\\n\\nThis would make the RPC server accessible at\\n\\n\`http://<your ip address>:17291\`\\n\\nand, locally at\\n\\n\`http://localhost:17291\`\\n\\n\\nTo make a HTTP RPC request to your Daemon RPC you should use a GET request that looks like this:\\n\\n\`http://<service address>:<service port>\`\\n\\n| Parameter           | Description                                                                                              |\\n| ------------------- | -------------------------------------------------------------------------------------------------------- |\\n| \`<service address>\` | IP of Daemon RPC, if it is located on local machine it is either 127.0.0.1 or localhost                  |\\n| \`<service port>\`    | Daemon RPC port, by default it is bound to 17291 port, but it can be manually bound to any port you want |\\n\\n\\n\\n\`javascript\`\\n\`\`\`js\\nconst CatalystD = require('turtlecoin-rpc').TurtleCoind\\n\\nconst daemon = new CatalystD({\\n  host: '0.0.0.0', // ip address or hostname of the TurtleCoind host\\n  port: 17291, // what port is the RPC server running on\\n  timeout: 2000, // request timeout\\n  ssl: false // whether we need to connect using SSL/TLS\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\nuse TurtleCoin\\\\TurtleCoind;\\n\\n$config = [\\n    'rpcHost' => 'http://localhost',\\n    'rpcPort' => 17291,\\n];\\n\\n$catalystd = new TurtleCoind($config);\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nfrom turtlecoin import TurtleCoind\\n\\nrpc_host = 'localhost'\\nrpc_port = 17291\\ncatalystd = TurtleCoind(rpc_host, rpc_port)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nimport (\\n  \\"fmt\\"\\n  trpc \\"github.com/turtlecoin/turtlecoin-rpc-go\\"\\n)\\n\\nrpcHost := \\"localhost\\"\\nrpcPort := 17291\\n\\ndaemon := trpc.TurtleCoind{\\n  URL: rpcHost,\\n  Port: rpcPort}\\n\`\`\`\\n\\n\\n## getheight\\n\\n\`getheight()\` returns the height of the daemon and the network\\n\\nNo Input.\\n\\n**Output**\\n\\n| Argument       | Description            | Format |\\n| -------------- | ---------------------- | ------ |\\n| height         | Current daemon height  | int    |\\n| network_height | Current Network height | int    |\\n| status         | Status of request      | string |\\n\\n\`\`\`bash\\ncurl http://localhost:17291/getheight\\n\`\`\`\\n\\n\`javascript\`\\n\`\`\`js\\ndaemon.getHeight().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\n<?php\\n$response = $catalystd->getHeight();\\necho $response;\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nresponse = catalystd.get_height()\\nprint(response)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nresponse := daemon.Height()\\nfmt.Println(response)\\n\`\`\`\\n\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"height\\":614214,\\n    \\"network_height\\":614218,\\n    \\"status\\":\\"OK\\"\\n}\\n\`\`\`\\n\\n## getinfo\\n\\n\\n\`getinfo()\` returns information related to the network and daemon connection\\n\\nNo Input.\\n\\n**Output**\\n\\n| Argument                   | Description                                    | Format |\\n| -------------------------- | ---------------------------------------------- | ------ |\\n| alt_blocks_count           | -                                              | int    |\\n| difficulty                 | difficulty of the top block                    | int    |\\n| gray_peerlist_size         | -                                              | int    |\\n| hashrate                   | hashrate of the network                        | int    |\\n| height                     | height of the daemon                           | int    |\\n| incoming_connections_count | number of incoming connections to the daemon   | int    |\\n| last_known_block_index     | -                                              | int    |\\n| major_version              | -                                              | int    |\\n| minor_version              | -                                              | int    |\\n| network_height             | height of the network                          | int    |\\n| outgoing_connections_count | number of outgoing connections from the daemon | int    |\\n| start_time                 | -                                              | int    |\\n| status                     | Status of request                              | string |\\n| supported_height           | supported fork height                          | int    |\\n| synced                     | sync status                                    | bool   |\\n| testnet                    | whether the daemon is on testnet or not        | bool   |\\n| tx_count                   | transaction count in the network               | int    |\\n| tx_pool_size               | -                                              | int    |\\n| upgrade_heights            | pre-determined fork heights                    | array  |\\n| version                    | version of the daemon                          | string |\\n| white_peerlist_size        | -                                              | int    |\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl http://localhost:17291/getinfo\\n\`\`\`\\n\\n\`javascript\`\\n\`\`\`js\\ndaemon.getInfo().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\n<?php\\n$response = $catalystd->getInfo();\\necho $response;\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nresponse = catalystd.get_info()\\nprint(response)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nresponse := daemon.Info()\\nfmt.Println(response)\\n\`\`\`\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"alt_blocks_count\\":1,\\n    \\"difficulty\\":250340644,\\n    \\"grey_peerlist_size\\":493,\\n    \\"hashrate\\":8344688,\\n    \\"height\\":614321,\\n    \\"incoming_connections_count\\":28,\\n    \\"last_known_block_index\\":614319,\\n    \\"major_version\\":4,\\n    \\"minor_version\\":0,\\n    \\"network_height\\":614321,\\n    \\"outgoing_connections_count\\":8,\\n    \\"start_time\\":1531403048,\\n    \\"status\\":\\"OK\\",\\n    \\"supported_height\\":620000,\\n    \\"synced\\":true,\\n    \\"testnet\\":false,\\n    \\"tx_count\\":720189,\\n    \\"tx_pool_size\\":0,\\n    \\"upgrade_heights\\":[\\n        187000,\\n        350000,\\n        440000,\\n        620000,\\n        .....\\n    ],\\n    \\"version\\":\\"0.6.3\\",\\n    \\"white_peerlist_size\\":43\\n}\\n\`\`\`\\n\\n## gettransactions\\n\\n\`gettransactions()\` method returns list of missed transactions\\n\\nNo Input\\n\\n**Output**\\n\\n| Argument   | Description                                | Format |\\n| ---------- | ------------------------------------------ | ------ |\\n| missed_tx  | array of missed transactions               | array  |\\n| status     | Status of request                          | string |\\n| txs_as_hex | array of hex values of missed transactions | array  |\\n\\n\\n\\n\`\`\`bash\\ncurl http://localhost:17291/gettransactions\\n\`\`\`\\n\\n\`javascript\`\\n\`\`\`js\\ndaemon.getTransactions({\\n  hashes: [\\n    '549828e75151982b0e51b27e8f53b26ebc174f0ef78063984c8952b13e2a3564',\\n    '549828e75151982b0e51b27e8f53b26ebc174f0ef78063984c8952b13e2a3563'\\n  ]\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\n<?php\\n$response = $catalystd->getTransactions();\\necho $response;\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nresponse = catalystd.get_transactions()\\nprint(response)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nNot Implemented\\n\`\`\`\\n\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"missed_tx\\":[],\\n    \\"status\\":\\"OK\\",\\n    \\"txs_as_hex\\":[]\\n}\\n\`\`\`\\n\\n## getpeers\\n\\n\`getpeers()\` method returns the list of peers connected to the daemon\\n\\nNo Input.\\n\\n**Output**\\n\\n| Argument | Description                        | Format |\\n| -------- | ---------------------------------- | ------ |\\n| peers    | array of peers (peer_ip:peer_port) | array  |\\n| status   | Status of request                  | string |\\n\\n\`\`\`bash\\ncurl http://localhost:17291/getpeers\\n\`\`\`\\n\\n\`javascript\`\\n\`\`\`js\\ndaemon.getPeers().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\n<?php\\n$response = $catalystd->getPeers();\\necho $response;\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nresponse = catalystd.get_peers()\\nprint(response)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nresponse := daemon.Peers()\\nfmt.Println(response)\\n\`\`\`\\n\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"peers\\":[\\n        \\"192.222.157.172:17291\\",\\n        \\"94.23.49.75:17291\\",\\n        \\"112.78.10.43:17291\\",\\n        .....\\n    ],\\n    \\"status\\":\\"OK\\"\\n}\\n\`\`\`\\n\\n## feeinfo\\n\\n\`feeinfo()\` method returns information about the fee set for the remote node.\\n\\nNo Input.\\n\\n**Output**\\n\\n| Argument | Description                      | Format |\\n| -------- | -------------------------------- | ------ |\\n| address  | address to which the fee is paid | string |\\n| amount   | fee amount                       | int    |\\n| status   | Status of fees for the node      | string |\\n\\n\\n\\n\\n\`\`\`bash\\ncurl http://localhost:17291/feeinfo\\n\`\`\`\\n\\n\`javascript\`\\n\`\`\`js\\ndaemon.feeInfo().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`php\`\\n\`\`\`php\\n<?php\\n$response = $catalystd->getFeeInfo();\\necho $response;\\n\`\`\`\\n\\n\`python\`\\n\`\`\`py\\nresponse = catalystd.get_fee_info()\\nprint(response)\\n\`\`\`\\n\\n\`go\`\\n\`\`\`go\\nresponse := daemon.Fee()\\nfmt.Println(response)\\n\`\`\`\\n\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"address\\":\\"\\",\\n    \\"amount\\":0,\\n    \\"status\\":\\"Node's fee address is not set\\"\\n}\\n\`\`\`\\n\\n## License\\n\\n[![Creative Commons License](/assets/cc-by-sa.png)](https://creativecommons.org/licenses/by-sa/3.0/)\\n\\nThe content in this document was originally written by the [Bytecoin (BCN) Developers](https://bytecoin.org/). It is licensed under the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/). The source material can be found at the [Bytecoin Wiki](https://github.com/bcndev/bytecoin).\\n\\nAlso of note, TurtleCoin developers have altered and adapted the content to suit our implementation of the API. This was done independently of the Bytecoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n\\nAlso of note, CatalystCoin developers have altered and adapted the content to suit our implementation of the API. This was done independently of the TurtleCoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/api-documentation/"
            },
            "headings": [
              {
                "value": "RPC API"
              }
            ],
            "internal": {
              "contentDigest": "f34f02af02654eb1b1439d929dd41fd1",
              "content": "# RPC API\\n\\n**Catalyst Core RPC APIs:**\\n\\n- catalystd - Blockchain daemon\\n- wallet-api - Recommended RPC API to use for new projects or to migrate to from existing projects. Swagger based REST interface.\\n- catalyst-service - Deprecated wallet API, use wallet-api above insted\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/api-documentation/daemon-json-rpc-api/"
            },
            "headings": [
              {
                "value": "Daemon JSON RPC API"
              },
              {
                "value": "Installation"
              },
              {
                "value": "Interacting with the API"
              },
              {
                "value": "API endpoint example"
              },
              {
                "value": "Configuration and Instantiation"
              },
              {
                "value": "getblockcount"
              },
              {
                "value": "Expected Output"
              },
              {
                "value": "getblockhash"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getblocktemplate"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "submitblock"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getlastblockheader"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getblockheaderbyhash"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getblockheaderbyheight"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getcurrencyid"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getblocks"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getblock"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "gettransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "gettransactionpool"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "License"
              }
            ],
            "internal": {
              "contentDigest": "b3f98ac362d41d75c8f0eaaf864709e9",
              "content": "# Daemon JSON RPC API\\n\\nThe \`Catalyst\` daemon JSON RPC is a HTTP server which provides JSON 2.0 RPC interface for interacting with a daemon and a block explorer.\\n\\nCurrently, you can use the following official Turtle client bindings, they are totally compatible with our daemon:\\n\\n* [NodeJS](https://www.npmjs.com/package/turtlecoin-rpc)\\n* [PHP](https://github.com/turtlecoin/turtlecoin-rpc-php)\\n* [Python](https://github.com/turtlecoin/turtlecoin-rpc-python)\\n* [Go](https://github.com/turtlecoin/turtlecoin-rpc-go)\\n\\n## Installation\\n\\n\`\`\`\\nnpm i turtlecoin-rpc\\n\`\`\`\\n\\n\`\`\`\\ncomposer require turtlecoin/turtlecoin-rpc-php\\n\`\`\`\\n\\n\`\`\`\\npip3 install turtlecoin\\n\`\`\`\\n\\n\`\`\`\\ngo get github.com/turtlecoin/turtlecoin-rpc-go\\n\`\`\`\\n\\n## Interacting with the API\\n\\n### API endpoint example\\n\\n\`\`\`\\nhttp://localhost:17291/json_rpc\\n\`\`\`\\n\\n### Configuration and Instantiation\\n\\nTo start the Daemon JSON RPC API server at \`http://localhost:17291/json_rpc\`, run:\\n\\n\`catalystd --rpc-bind-port=17291\`\\n\\nTo make the server accessible from another computer, use the \`--rpc-bind-ip 0.0.0.0\` switch.\\n\\n\`catalystd --rpc-bind-ip=0.0.0.0 --rpc-bind-port=17291\`\\n\\nTo enable block explorer API access (like for \`getblocks\`, \`gettransactionpool\`, etc.), use the \`--enable-blockexplorer\` switch.\\n\\n\`catalystd --enable-blockexplorer\`\\n\\nThe above given switches can be combined to achieve remote access with block explorer methods as shown below.\\n\\n\`catalystd --enable-blockexplorer --rpc-bind-ip=0.0.0.0 --rpc-bind-port=17291\`\\n\\nThis would make the RPC server accessible at\\n\\n\`http://<your ip address>:17291/json_rpc\`\\n\\nand, locally at\\n\\n\`http://localhost:17291/json_rpc\`\\n\\n\\nTo make a JSON RPC request to your Daemon RPC you should use a GET request that looks like this:\\n\\n\`http://<service address>:<service port>/json_rpc\`\\n\\nParameter            | Description\\n-------------------- | ------------------------------------------------------------\\n\`<service address>\`  | IP of Daemon RPC, if it is located on local machine it is either 127.0.0.1 or localhost\\n\`<service port>\`     | Daemon RPC port, by default it is bound to 17291 port, but it can be manually bound to any port you want\\n\\n\\n\`\`\`js\\nconst Catalystd = require('turtlecoin-rpc').TurtleCoind\\n\\nconst daemon = new Catalystd({\\n  host: '0.0.0.0', // ip address or hostname of the TurtleCoind host\\n  port: 17291, // what port is the RPC server running on\\n  timeout: 2000, // request timeout\\n  ssl: false // whether we need to connect using SSL/TLS\\n})\\n\`\`\`\\n\\n\`\`\`php\\n<?php\\nuse TurtleCoin\\\\TurtleCoind;\\n\\n$config = [\\n    'rpcHost' => 'http://localhost',\\n    'rpcPort' => 17291,\\n];\\n\\n$catalystd = new TurtleCoind($config);\\n\`\`\`\\n\\n\`\`\`py\\nfrom turtlecoin import TurtleCoind\\n\\nrpc_host = 'localhost'\\nrpc_port = 17291\\ncatalystd = TurtleCoind(rpc_host, rpc_port)\\n\`\`\`\\n\\n\\n\`\`\`go\\nimport (\\n    \\"fmt\\"\\n    trpc \\"github.com/turtlecoin/turtlecoin-rpc-go\\"\\n)\\n\\nrpcHost := \\"localhost\\"\\nrpcPort := 17291\\n\\ndaemon := trpc.TurtleCoind{\\n    URL: rpcHost,\\n    Port: rpcPort}\\n\`\`\`\\n\\n## getblockcount\\n\\n\`getblockcount()\` method returns the current chain height.\\n\\nNo Input.\\n\\n**Output**\\n\\nArgument         | Description          | Format\\n---------------- | -------------------- | ------\\ncount            | Current chain height | int\\nstatus           | Status of request | string\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\", \\"method\\":\\"getblockcount\\", \\"params\\":{}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlockCount().then((blockCount) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\`\`\`php\\n<?php\\n$response = $catalystd->getBlockCount();\\necho $response;\\n\`\`\`\\n\\n\`\`\`py\\nresponse = catalystd.get_block_count()\\nprint(response)\\n\`\`\`\\n\\n\`\`\`go\\nresponse := daemon.GetBlockCount()\\nfmt.Println(response)\\n\`\`\`\\n\\n#### Expected Output\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"count\\":560915,\\n        \\"status\\":\\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n## getblockhash\\n\\n\`getblockhash()\` method returns block hash for a given height off by one.\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description           | Format\\n--------------- | ------------- | --------------------- | ------\\nheight          | Yes           | The height of the block whose previous hash is to be retrieved. | int\\n\\n**Output**\\n\\nArgument         | Description          | Format\\n---------------- | -------------------- | ------\\nresult           | Hash of previous block | int\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"on_getblockhash\\",\\"params\\":[123456]}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlockHash({\\n  height: 500000\\n}).then((blockHash) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$height = 123456;\\n$response = $catalystd->getBlockHash($height);\\necho $response;\\n\`\`\`\\n\\n\`\`\`py\\nheight = 123456\\nresponse = catalystd.get_block_hash(height)\\nprint(response)\\n\`\`\`\\n\\n\`\`\`go\\nheight := 123456\\nresponse := daemon.GetBlockHash(height)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":\\"4bd7d...\\"\\n}\\n\`\`\`\\n\\n## getblocktemplate\\n\\n\`getblocktemplate(reserve_size, addr)\` method returns blocktemplate with an empty \\"hole\\" for nonce.\\n\\n**Input**\\n\\nArgument | Mandatory | Description | Format\\n-------- | -------- | ------------- | -----\\nreserve_size | Yes | Size of the reserve to be specified | int\\nwallet_address | Yes | Valid CatalysatCoin wallet address | String\\n\\n**Output**\\n\\nArgument | Description | Format\\n-------- | ---------- | ------\\nblocktempate_blob | Blocktemplate with empty \\"hole\\" for nonce | string\\ndifficulty | Difficulty of the network | int\\nheight | Chain height of the network | int\\nreserved_offset | Offset reserved | int\\nstatus | Status of the network | string\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"getblocktemplate\\",\\"params\\":{\\"reserve_size\\":200,\\"wallet_address\\":\\"TRTLxxxx...\\"}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlockTemplate({\\n  reserveSize: 200,\\n  walletAddress: 'Cat1v1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((blockTemplate) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$reserveSize = 200;\\n$address = 'CAT1xxxx...';\\n$response = $catalystd->getBlockTemplate($reserveSize, $address);\\necho $response;\\n\`\`\`\\n\\n\`\`\`py\\nreserve_size = 200\\nwallet_address = 'TRTLxxxx...'\\n\\nresponse = catalystd.get_block_template(reserve_size, wallet_address)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nreserveSize := 200\\nwalletAddress := \\"Cat1xxxx...\\"\\n\\nresponse := daemon.GetBlockTemplate(reserveSize, walletAddress)\\nfmt.Println(response)\\n\`\`\`\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n\\t\\"jsonrpc\\": \\"2.0\\",\\n\\t\\"result\\": {\\n\\t\\t\\"blocktemplate_blob\\": \\"0100de...\\",\\n\\t\\t\\"difficulty\\": 65563,\\n\\t\\t\\"height\\": 123456,\\n\\t\\t\\"reserved_offset\\": 395,\\n\\t\\t\\"status\\": \\"OK\\"\\n\\t}\\n}\\n\`\`\`\\n\\n## submitblock\\n\\n\`submitblock(block_blob)\` method submits mined block.\\n\\n**Input**\\n\\nArgument | Mandatory | Description | Format\\n-------- | -------- | ------------- | -----\\nblock_blob | Yes | Block blob of the mined block | string\\n\\n**Output**\\n\\nArgument         | Description          | Format\\n---------------- | -------------------- | ------\\nstatus           | Status of request | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"submitblock\\",\\"params\\":[\\"0100b....\\"]}' https://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.submitBlock({\\n  blockBlob: '...'\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$blockBlob = '0100b...';\\n$response = $catalystd->submitBlock($blockBlob);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nblock_blob = '0100b...'\\nresponse = catalystd.submit_block(block_blob)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nblockBlob := \\"0100b...\\"\\nresponse := daemon.SubmitBlock(blockBlob)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n\\t\\"jsonrpc\\": \\"2.0\\",\\n\\t\\"result\\": {\\n\\t\\t\\"status\\" : \\"OK\\"\\n\\t}\\n}\\n\`\`\`\\n\\n## getlastblockheader\\n\\n\`getlastblockheader\` method returns the block header of the last block.\\n\\nNo Input\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nblock_size | size of the block | int\\ndepth | height away from the known top block | int\\ndifficulty | difficulty of the last block | int\\nhash | hash of the last block | string\\nheight | height of the last block | int\\nmajor_version | - | int\\nminor_version | - | int\\nnonce | - | int\\nnum_txs | Number of transactions in the block | int\\norphan_status | whether the last block was an orphan or not | bool\\nprev_hash | hash of the previous block | string\\nreward | reward of the block | str\\ntimestamp | the time at which the block is occured on chain since Unix epoch | int\\nstatus | status of the request | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"getlastblockheader\\",\\"params\\":{}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getLastBlockHeader().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystd->getLastBlockHeader();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = catalystd.get_last_block_header()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse := daemon.GetLastBlockHeader()\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"block_header\\":{\\n            \\"block_size\\":86171,\\n            \\"depth\\":0,\\n            \\"difficulty\\":431119113,\\n            \\"hash\\":\\"b746b...\\",\\n            \\"height\\":561342,\\n            \\"major_version\\":4,\\n            \\"minor_version\\":0,\\n            \\"nonce\\":715846563,\\n            \\"num_txes\\":4,\\n            \\"orphan_status\\":false,\\n            \\"prev_hash\\":\\"b8e02...\\",\\n            \\"reward\\":2930801,\\n            \\"timestamp\\":1529750993\\n        },\\n        \\"status\\":\\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n## getblockheaderbyhash\\n\\n\`getblockheaderbyhash()\` returns block header by given block hash\\n\\n**Input**\\n\\nArgument | Mandatory | Description | Format\\n-------- | ---------- | ----------- | -----\\nhash | Yes   | Hash of the block | string\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nblock_size | size of the block | int\\ndepth | height away from the known top block | int\\ndifficulty | difficulty of the requested block | int\\nhash | hash of the requested block | string\\nheight | height of the requested block | int\\nmajor_version | - | int\\nminor_version | - | int\\nnonce | - | int\\nnum_txs | Number of transactions in the block | int\\norphan_status | whether the requested block was an orphan or not | bool\\nprev_hash | hash of the previous block | string\\nreward | reward of the block | str\\ntimestamp | the time at which the block is occured on chain since Unix epoch | int\\nstatus | status of the request | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"getblockheaderbyhash\\",\\"params\\":{\\"hash\\":\\"30706...\\"}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlockHeaderByHash({\\n  hash: '7d6db7b77232d41c19d898e81c85ecf08c4e8dfa3434f975a319f6261a695739'\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$hash = '30706...';\\n$response = $catalystd->getBlockHeaderByHash($hash);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nhash = '30706...'\\nresponse = catalystd.get_block_header_by_hash(hash)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nhash := \\"30706...\\"\\nresponse := daemon.GetBlockHeaderByHash(hash)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"block_header\\":{\\n            \\"block_size\\":11640,\\n            \\"depth\\":437898,\\n            \\"difficulty\\":70050782,\\n            \\"hash\\":\\"30706...\\",\\n            \\"height\\":123456,\\n            \\"major_version\\":3,\\n            \\"minor_version\\":0,\\n            \\"nonce\\":3177228614,\\n            \\"num_txes\\":3,\\n            \\"orphan_status\\":false,\\n            \\"prev_hash\\":\\"4bd7d...\\",\\n            \\"reward\\":2969487,\\n            \\"timestamp\\":1516631879\\n        },\\n    \\"status\\":\\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n## getblockheaderbyheight\\n\\n\`getblockheaderbyheight()\` method returns block header by given block height\\n\\n**Input**\\n\\nArgument | Mandatory | Description | Format\\n------ | ----------- | ----------- | -----\\nheight | Yes   | Height of the block | int\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nblock_size | size of the block | int\\ndepth | height away from the known top block | int\\ndifficulty | difficulty of the requested block | int\\nhash | hash of the requested block | string\\nheight | height of the requested block | int\\nmajor_version | - | int\\nminor_version | - | int\\nnonce | - | int\\nnum_txs | Number of transactions in the block | int\\norphan_status | whether the requested block was an orphan or not | bool\\nprev_hash | hash of the previous block | string\\nreward | reward of the block | str\\ntimestamp | the time at which the block is occured on chain since Unix epoch | int\\nstatus | status of the request | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"getblockheaderbyheight\\",\\"params\\":{\\"height\\":123456}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlockHeaderByHeight({\\n  height: 502345\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$height = 123456;\\n$response = $catalystd->getBlockHeaderByHeight($height);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nheight = 123456\\nresponse = catalystd.get_block_header_by_height(height)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nheight := 123456\\nresponse := daemon.GetBlockHeaderByHeight(height)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"block_header\\":{\\n            \\"block_size\\":11640,\\n            \\"depth\\":437898,\\n            \\"difficulty\\":70050782,\\n            \\"hash\\":\\"30706...\\",\\n            \\"height\\":123456,\\n            \\"major_version\\":3,\\n            \\"minor_version\\":0,\\n            \\"nonce\\":3177228614,\\n            \\"num_txes\\":3,\\n            \\"orphan_status\\":false,\\n            \\"prev_hash\\":\\"4bd7d...\\",\\n            \\"reward\\":2969487,\\n            \\"timestamp\\":1516631879\\n        },\\n    \\"status\\":\\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n## getcurrencyid\\n\\n\`getcurrencyid()\` method returns unique currency identifier.\\n\\nNo Input\\n\\n**Output**\\n\\nArgument | Description | Format\\n-------- | ----------- | ------\\ncurrency_id_blob | unique currency identifier | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"getcurrencyid\\",\\"params\\":{}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\\n\`\`\`js\\ndaemon.getCurrencyId().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystd->getCurrencyId();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = catalystd.get_currency_id()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse := daemon.GetCurrencyID()\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"currency_id_blob\\":\\"7fb97...\\"\\n    }\\n}\\n\`\`\`\\n\\n## getblocks\\n\\n\`getblocks()\` method returns information on the last 30 blocks from height (inclusive)\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description           | Format\\n--------------- | ------------- | --------------------- | ------\\nheight          | Yes           | height of the last block to be included in the result. | int\\n\\n**Output**\\n\\nArgument |              | Description                           | Format\\n-------- | ------------ | -----------                           | ------\\nstatus   |              | status of the request                 | string\\nblocks   | **Array of** |                                       |\\n         | cumul_size   | size of the block                     | int\\n         | difficulty   | difficulty of the block               | int\\n         | hash         | hash of the block                     | string\\n         | height       | height of the block                   | int\\n         | timestamp    | the time at which the block is occured on the chain since Unix epoch | int\\n         | tx_count     | number of transactions in the block   | int\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"f_blocks_list_json\\",\\"params\\":{\\"height\\":500000}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlocks({\\n  height: 500000\\n}).then((blocks) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$height = 500000;\\n$response = $catalystd->getBlocks($height);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nheight = 500000\\nresponse = catalystd.get_blocks(height)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nheight := 500000\\nresponse := daemon.GetBlocks(height)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\": \\"2.0\\",\\n    \\"result\\": {\\n        \\"blocks\\":[\\n            {\\n                \\"cumul_size\\": 22041,\\n                \\"difficulty\\": 285124963,\\n                \\"hash\\": \\"62f00...\\",\\n                \\"height\\": 500000,\\n                \\"timestamp\\": 1527834137,\\n                \\"tx_count\\": 4\\n            }\\n        ],\\n        \\"status\\": \\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n\\n## getblock\\n\\n\`getblock()\` method returns information on a single block\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description           | Format\\n--------------- | ------------- | --------------------- | ------\\nhash            | Yes           | hash of the block     | string\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nalreadyGeneratedCoins | total number of coins generated in the network upto that block | string\\nalreadyGeneratedTransactions | total number of transactions present in the network upto that block | int\\nbaseReward | calculated reward | int\\nblock_size | size of the block | int\\ndepth | height away from the known top block | int\\ndifficulty | difficulty of the requested block | int\\neffectiveSizeMedian | fixed constant for max size of block | int\\nhash | hash of the requested block | string\\nheight | height of the requested block | int\\nmajor_version | - | int\\nminor_version | - | int\\nnonce | - | int\\norphan_status | whether the requested block was an orphan or not | bool\\npenalty | penalty in block reward determined for deviation | float\\nprev_hash | hash of the previous block | string\\nreward | total reward of the block after removing penalty | str\\nsizeMedian | calculated median size from last 100 blocks | int\\ntimestamp | the time at which the block is occured on chain since Unix epoch | int\\ntotalFeeAmount | total fees for the transactions in the block | int\\ntransactions | Array of transactions in the block | array\\ntransactionsCumulativeSize | total sum of size of all transactions in the block | int\\nstatus | status of the request | string\\n\\nTransaction Attributes:\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\namount_out | output amount of the transaction | int\\nfee | fees for the transaction | int\\nhash | hash of the transaction | string\\nsize | size of the transaction | int\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"f_block_json\\",\\"params\\":{\\"hash\\":\\"980ff...\\"}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getBlock({\\n  hash: 'f11580d74134ac34673c74f8da458080aacbe1eccea05b197e9d10bde05139f5'\\n}).then((block) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$hash = '980ff...';\\n$response = $catalystd->getBlock($hash);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nhash = '980ff...'\\nresponse = catalystd.get_block(hash)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nhash := \\"980ff...\\"\\nresponse := daemon.GetBlock(hash)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"block\\":{\\n            \\"alreadyGeneratedCoins\\":\\"1659188157030\\",\\n            \\"alreadyGeneratedTransactions\\":1097221,\\n            \\"baseReward\\":2930784,\\n            \\"blockSize\\":384,\\n            \\"depth\\":1,\\n            \\"difficulty\\":264289473,\\n            \\"effectiveSizeMedian\\":100000,\\n            \\"hash\\":\\"980ff...\\",\\n            \\"height\\":561537,\\n            \\"major_version\\":4,\\n            \\"minor_version\\":0,\\n            \\"nonce\\":60779,\\n            \\"orphan_status\\":false,\\n            \\"penalty\\":0.0,\\n            \\"prev_hash\\":\\"c37f8...\\",\\n            \\"reward\\":2930784,\\n            \\"sizeMedian\\":265,\\n            \\"timestamp\\":1529757254,\\n            \\"totalFeeAmount\\":0,\\n            \\"transactions\\":[\\n                {\\n                    \\"amount_out\\":2930784,\\n                    \\"fee\\":0,\\n                    \\"hash\\":\\"c0a2d...\\",\\n                    \\"size\\":265\\n                }\\n            ],\\n            \\"transactionsCumulativeSize\\":265\\n        },\\n        \\"status\\":\\"OK\\"\\n    }\\n}\\n\`\`\`\\n\\n## gettransaction\\n\\n\`gettransaction()\` method returns information on single transaction.\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description                   | Format\\n--------------- | ------------- | ---------------------         | ------\\nhash            | Yes           | hash of the transaction       | string\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nblock | details of the block in which transaction is present | json object\\nstatus | status of the request | string\\ntx | sub-transactions in the transaction | json object\\ntxDetails | details of the transaction | json object\\n\\nBlock attributes:\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\ncumul_size | size of the block | int\\ndifficulty | difficulty of the block | int\\nhash | hash of the block | string\\nheight | height of the block | int\\ntimestamp | the time at which the block is occured on chain since Unix epoch | int\\ntx_count | number of transactions in the block | int\\n\\nTransaction Details attributes:\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\namount_out | total amount present in the transaction | int\\nfee | total fees of the transaction | int\\nhash | hash of the transaction | string\\nmixin | mixin of the transaction | int\\npaymentId | payment Id of the transaction | string\\nsize | total size of the transaction | int\\n\\nTransaction attributes:\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nextra | Transaction extra which can be any information in hex | string\\nunlock_time | delay in unlocking the amount | int\\nversion | - | int\\nvin | array of input transactions | array\\nvout | array of output transactions | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"f_transaction_json\\",\\"params\\":{\\"hash\\":\\"702ad...\\"}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getTransaction({\\n  hash: '702ad5bd04b9eff14b080d508f69a320da1909e989d6c163c18f80ae7a5ab832'\\n}).then((transaction) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$hash = '702ad...';\\n$response = $catalystd->getTransaction($hash);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nhash = '702ad...'\\nresponse = catalystd.get_transaction(hash)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nhash := \\"702ad...\\"\\nresponse := daemon.GetTransaction(hash)\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"block\\":{\\n            \\"cumul_size\\":22041,\\n            \\"difficulty\\":106780143,\\n            \\"hash\\":\\"62f00...\\",\\n            \\"height\\":500000,\\n            \\"timestamp\\":1527834137,\\n            \\"tx_count\\":4\\n        },\\n        \\"status\\":\\"OK\\",\\n        \\"tx\\":{\\n            \\"extra\\":\\"019e4...\\",\\n            \\"unlock_time\\":500040,\\n            \\"version\\":1,\\n            \\"vin\\":[\\n                {\\n                    \\"type\\":\\"ff\\",\\n                    \\"value\\":{\\n                        \\"height\\":500000\\n                    }\\n                }\\n            ],\\n            \\"vout\\":[\\n                {\\n                    \\"amount\\":80,\\n                    \\"target\\":{\\n                        \\"data\\":{\\n                            \\"key\\":\\"5ce69...\\"\\n                        },\\n                        \\"type\\":\\"02\\"\\n                    }\\n                }\\n            ]\\n        },\\n        \\"txDetails\\":{\\n            \\"amount_out\\":2936280,\\n            \\"fee\\":0,\\n            \\"hash\\":\\"702ad...\\",\\n            \\"mixin\\":0,\\n            \\"paymentId\\":\\"\\",\\n            \\"size\\":266\\n        }\\n    }\\n}\\n\`\`\`\\n\\n## gettransactionpool\\n\\n\`gettransactionpool()\` returns the list of transaction hashes present in mempool\\n\\nNo Input\\n\\n**Output**\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\nstatus | status of the request | string\\ntransactions | array of transactions in mempool | array\\n\\nTransactions attributes:\\n\\nArgument | Description | Format\\n------- | ---------- | --------\\namount_out | output amount of the transaction | int\\nfee | fees for the transaction | int\\nhash | hash of the transaction | string\\nsize | size of the transaction | int\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"method\\":\\"f_on_transactions_pool_json\\",\\"params\\":{}}' http://localhost:17291/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\ndaemon.getTransactionPool().then((transactions) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystd->getTransactionPool();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = catalystd.get_transaction_pool()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse := daemon.GetTransactionPool()\\nfmt.Println(response)\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n    \\"jsonrpc\\":\\"2.0\\",\\n    \\"result\\":{\\n        \\"status\\":\\"OK\\",\\n        \\"transactions\\":[\\n            {\\n                \\"amount_out\\":8990,\\n                \\"fee\\":10,\\n                \\"hash\\":\\"a5e88...\\",\\n                \\"size\\":541\\n            }\\n        ]\\n    }\\n}\\n\`\`\`\\n\\n\\n## License\\n\\n[![Creative Commons License](/assets/cc-by-sa.png)](https://creativecommons.org/licenses/by-sa/3.0/)\\n\\nThe content in this document was originally written by the [Bytecoin (BCN) Developers](https://bytecoin.org/). It is licensed under the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/). The source material can be found at the [Bytecoin Wiki](https://github.com/bcndev/bytecoin).\\n\\nAlso of note, TurtleCoin developers have altered and adapted the content to suit our implementation of the API. This was done independently of the Bytecoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n\\nAlso of note, Catalyst Coin developers have altered and adapted the content to suit our implementation of the API. This was done independently of the Bytecoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/catalyst-specs/catalyst-specs/"
            },
            "headings": [
              {
                "value": "Catalyst Network specs:"
              }
            ],
            "internal": {
              "contentDigest": "ceaa2c9371ab6eb8e3f602d1f2cd613d",
              "content": "# Catalyst Network specs:\\n\\n- **Ticker:** \`CX\`.\\n- **Current Version:** \`0.4.0.3\`.\\n- **Launch Date:** \`November 25, 2018\`.\\n- **Algo:** \`Argon2id/Chukwa\`.\\n- **Total Supply:** \`77 million\`.\\n- **Block Time:** \`60 sec\`.\\n- **Transaction Speed:** \`Instant\`.\\n- **Block Reward:** \`15CX\`.\\n- **Difficulty Retarget:** \`60 sec\`.\\n- **Minimal Fee:** \`10000 atomic units (.001CX)\`.\\n- **Minimal Mixin:** \`3\`.\\n- **Premine:** \`None\`.\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/catalyst-specs/nodes/"
            },
            "headings": [
              {
                "value": "Public Remote Nodes"
              },
              {
                "value": "Public P2P nodes"
              },
              {
                "value": "Public RPC Services"
              },
              {
                "value": "GUI Wallet Endpoinst"
              }
            ],
            "internal": {
              "contentDigest": "cf8be47a8b4fbd3c2f0b90948ebd32ee",
              "content": "# Public Remote Nodes\\n\\nThe list of public nodes:\\n\\n## Public P2P nodes\\n\\n**node-chukwa-01.cryptocatalyst.net**\\n- Hoster: @n8tb1t\\n- IP: Dynamic\\n- Deamon Version: 0.4.0.3\\n- P2P: node-chukwa-01.cryptocatalyst.net:17290\\n- RPC: [STATUS](http://node-chukwa-01.cryptocatalyst.net:17291/getinfo)\\n\\n**node-chukwa-02.cryptocatalyst.net**\\n- Hoster: @CapEtn\\n- IP: 207.180.227.16\\n- Deamon Version: 0.4.0.3\\n- P2P: node-chukwa-02.cryptocatalyst.net:17290\\n- RPC: [STATUS](https://cxex.catalystcrypto.net/cxex-explorer/getinfo)\\n\\n**node-chukwa-03.cryptocatalyst.net**\\n- Hoster: the-miners.de\\n- IP: 167.86.114.167\\n- Deamon Version: 0.4.0.3\\n- P2P: node-chukwa-03.cryptocatalyst.net:17290\\n- RPC: [STATUS N/A](#)\\n\\n\\n**node-chukwa-04.cryptocatalyst.net**\\n- Hoster: dirtybits\\n- IP: 3.13.173.213\\n- Deamon Version: 0.4.0.3\\n- P2P: node-chukwa-04.cryptocatalyst.net:17290\\n- RPC: [STATUS](http://node-chukwa-01.cryptocatalyst.net:17291/getinfo)\\n\\n**node-chukwa-05.cryptocatalyst.net**\\n- Hoster: 163-172-8-20.rev.poneytelecom.eu\\n- IP: 163.172.8.20\\n- Deamon Version: 0.4.0.3\\n- P2P: node-chukwa-05.cryptocatalyst.net:17290\\n- RPC: [STATUS](http://163.172.8.20:17291/getinfo)\\n\\n**First Crypto Bank**\\n- Hoster: ???\\n- P2P: ??\\n- RPC: [STATUS](#)\\n\\n**TradeCX**\\n- Hoster: ???\\n- P2P: ??\\n- RPC: [STATUS](#)\\n\\n\\n## Public RPC Services\\n\\n- http://node-chukwa-01.cryptocatalyst.net:17291/getinfo\\n- http://node-chukwa-05.cryptocatalyst.net:17291/getinfo\\n- http://node.wellgitu.xyz:49898/getinfo\\n- http://spookypool.nl:17291/getinfo\\n- https://cxex.catalystcrypto.net/cxex-explorer/getinfo\\n\\n\\n## GUI Wallet Endpoinst\\n\\n- [JSON LIST](https://github.com/catalystdevelopment/catalyst-nodes-json/blob/master/catalyst-nodes.json)\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/catalyst-specs/"
            },
            "headings": [
              {
                "value": "Catalyst Overview"
              }
            ],
            "internal": {
              "contentDigest": "f8111b91cf579b443069c4cc25ef8996",
              "content": "# Catalyst Overview\\n\\n\\n\`Catalyst\`  — is an anonymous platform, based on blockchain distributed\\nnetwork, intended to make almost instant payments\\nwith extremely low commission fees.\\n\\n> It's a tool for building distributed applications.\\n\\nThe payment system is only one of many use cases it can be used for.\\n\\n\`Catalyst\` was created by the community — for the community.\\n\\nWe do not recognize I.C.Os, Master Nodes, stacking\\nand technical emission a.k.a.  (premine).\\n\\nEvery participant of the consensus  — has equal rights.\\n\\nDevelopers and miners do not have any preferences\\nor special treatment and are regular members of the collective.\\n\\nThe main goal of Catalyst is to create an infrastructure for Dapps\\n(decentralized applications), in order to give independent and creative\\npeople a chance to adapt in a constantly changing world,\\nand get back control of their privacy and security.\\n\\nWe don't have a central leadership, all the decisions regarding the\\nproject development are made exclusively by the community!\\n\\nIn our [Discord](https://discord.gg/byKYDyb) channel, you can always find any help and\\nfriendly support, meet new like-minded friends and\\njust spend some time with a lot of fun.\\n\\nCatalyst is a non-profit open-source community!\\nIf you want to get involved in project's life, just PM us.\\nWe'll be very happy to have you on our team\\nand will appreciate any help!\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/catalyst-specs/getting-started/"
            },
            "headings": [
              {
                "value": "Getting Started"
              }
            ],
            "internal": {
              "contentDigest": "01b84e3d48ba55c2c6a9849a0fece844",
              "content": "# Getting Started\\n\\nIt's extremely easy to start using Catalyst!\\nIf you are comfortable with console applications just download the official CLI:\\n\\n- [Windows CLI v0.4.0.3](https://github.com/catalystdevelopment/catalyst/releases/download/v0.4.0.3/catalyst-cli-windows-v0.4.0.3.zip)\\n- [Linux CLI v0.4.0.3](https://github.com/catalystdevelopment/catalyst/releases/download/v0.4.0.3/catalyst-cli-lunux-v0.4.0.3.tar.gz)\\n\\n\\nThough if you prefer the graphic user interface, we released nice GUI wallets for you, as well:\\n\\n- [Windows CatalystLedger-v2.0.0](https://github.com/catalystdevelopment/catalyst-gui-wallet/releases/download/v2.0.0-chukwa/CatalystLedger-v2.0.0-win-setup.exe)\\n- [Linux CatalystLedger-v2.0.0](https://github.com/catalystdevelopment/catalyst-gui-wallet/releases/download/v2.0.0-chukwa/CatalystLedger-v2.0.0-linux.AppImage)\\n\\n\\nWe also have a \`Catalyst\` Paper Wallet!\\n\\n- [Catalyst Paperwallet](https://paperwallet.cryptocatalyst.net/)\\n\\n>This will make it easy for you to introduce your friends and family to Catalyst by showing them how, by writing down and protecting their mnemonic seed, they will always have access to their funds!\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/api-documentation/wallet-rpc-api/"
            },
            "headings": [
              {
                "value": "Legacy Wallet RPC API"
              },
              {
                "value": "Installation"
              },
              {
                "value": "Interacting with the API"
              },
              {
                "value": "API endpoint example"
              },
              {
                "value": "Configuration and instantiation"
              },
              {
                "value": "reset"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "save"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getViewKey"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getSpendKeys"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getMnemonicSeed"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getStatus"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getAddresses"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "createAddress"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "deleteAddress"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getBalance"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getBlockHashes"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getTransactionHashes"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getTransactions"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getUnconfirmedTransactionHashes"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "sendTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "createDelayedTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getDelayedTransactionHashes"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "deleteDelayedTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "sendDelayedTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "sendFusionTransaction"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "estimateFusion"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "createIntegratedAddress"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "getFeeInfo"
              },
              {
                "value": "Expected Output:"
              },
              {
                "value": "License"
              }
            ],
            "internal": {
              "contentDigest": "19d418e1b378b8b5578f0c68daff7f5e",
              "content": "# Legacy Wallet RPC API\\n\\nThe \`Catalyst\` RPC Wallet is a HTTP server which provides JSON 2.0 RPC interface for \`Catalyst\` payment operations and address management.\\n\\nCurrently, you can use the following official Turtle client bindings, they are totally compatible with our daemon:\\n\\n* [NodeJS](https://www.npmjs.com/package/turtlecoin-rpc)\\n* [PHP](https://github.com/turtlecoin/turtlecoin-rpc-php)\\n* [Python](https://github.com/turtlecoin/turtlecoin-rpc-python)\\n* [Go](https://github.com/turtlecoin/turtlecoin-rpc-go)\\n\\n**catalyst-service is deprecated and not supported. Information in this article may be out of date or incorrect. Use [wallet-api](https://catalystdevelopment.github.io/) instead**\\n\\n## Installation\\n\\n\\n\\n\\n\`\`\`\\nnpm install turtlecoin-rpc\\n\`\`\`\\n\\n\\n\`\`\`\\ncomposer require turtlecoin/turtlecoin-rpc-php\\n\`\`\`\\n\\n\\n\`\`\`\\npip3 install turtlecoin\\n\`\`\`\\n\\n\\n\`\`\`\\ngo get github.com/turtlecoin/turtlecoin-rpc-go\\n\`\`\`\\n\\n\\n\\n## Interacting with the API\\n\\n### API endpoint example\\n\\n\`\`\`\\nhttp://localhost:17280/json_rpc\\n\`\`\`\\n\\n### Configuration and instantiation\\n\\nTo make a JSON RPC request to your TurtleCoin RPC Wallet you should use a GET request that looks like this:\\n\\n\`http://<service address>:<service port>/json_rpc\`\\n\\n| Parameter           | Description                                                                                                        |\\n| ------------------- | ------------------------------------------------------------------------------------------------------------------ |\\n| \`<service address>\` | IP of TurtleCoin RPC Wallet, if RPC Wallet is located on local machine it is either 127.0.0.1 or localhost         |\\n| \`<service port>\`    | TurtleCoin RPC Wallet port, by default it is bound to 17280 port, but it can be manually bound to any port you want |\\n\\n\\n\\n\\n\`\`\`js\\nconst TurtleService = require('turtlecoin-rpc').TurtleService\\n\\nconst service = new TurtleService({\\n  host: '127.0.0.1', // ip address or hostname of the turtle-service host\\n  port: 17280, // what port is turtle-service running on\\n  timeout: 2000, // request timeout\\n  ssl: false, // whether we need to connect using SSL/TLS\\n  rpcPassword: 'changeme', // must be set to the password used to run turtle-service\\n\\n  // RPC API default values\\n  defaultMixin: false, // the default mixin to use for transactions, the default setting is false which means we don't have a default value\\n  defaultFee: 0.1, // the default transaction fee for transactions\\n  defaultBlockCount: 1, // the default number of blocks when blockCount is required\\n  decimalDivisor: 100, // Currency has many decimal places?\\n  defaultFirstBlockIndex: 1, // the default first block index we will use when it is required\\n  defaultUnlockTime: 0, // the default unlockTime for transactions\\n  defaultFusionThreshold: 10000000, // the default fusionThreshold for fusion transactions\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\nuse TurtleCoin\\\\TurtleService;\\n\\n$config = [\\n    'rpcHost'     => 'http://localhost',\\n    'rpcPort'     => 17280,\\n    'rpcPassword' => 'passw0rd',\\n];\\n\\n$catalystService = new TurtleService($config);\\n\`\`\`\\n\\n\\n\`\`\`py\\nfrom turtlecoin import Walletd\\n\\nrpc_host = 'localhost'\\nrpc_port = 17280\\nrpc_password = 'passw0rd'\\n\\nwalletd = Walletd(rpc_password, rpc_host, rpc_port)\\n\`\`\`\\n\\n\\n\`\`\`go\\nimport (\\n  \\"fmt\\"\\n  trpc \\"github.com/turtlecoin/turtlecoin-rpc-go\\"\\n)\\n\\nrpcHost := \\"localhost\\"\\nrpcPort := 17280\\nrpcPassword := \\"passw0rd\\"\\n\\nservice := trpc.Walletd{\\n  URL: rpcHost,\\n  Port: rpcPort,\\n  RPCPassword: rpcPassword}\\n\`\`\`\\n\\n\\n\\n## reset\\n\\n\`reset()\` method allows you to re-sync your wallet.\\n\\n**Input**\\n\\n| Argument   | Mandatory | Description                                                                                      | Format |\\n| ---------- | --------- | ------------------------------------------------------------------------------------------------ | ------ |\\n| scanHeight | No        | The height to begin scanning for transactions at. This can greatly speed up wallet syncing time. | int    |\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"reset\\",\\"params\\":{\\"scanHeight\\":100000}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.reset({\\n  scanHeight: 100000\\n}).then(() => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$scanHeight = 100000;\\n$response = $catalystService->reset($scanHeight);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nscan_height = 100000\\nresponse = walletd.reset(scan_height)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nscanHeight := 0 // starting height to scan\\nresponse, err := service.Reset(scanHeight)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{}\\n}\\n\`\`\`\\n\\nNo output in case of success.\\n\\n> **Note**: If the \`viewSecretKey\` argument is not provided, the \`reset()\` method resets the wallet and re-syncs it. If the \`viewSecretKey\` argument is provided, the \`reset()\` method substitutes the existing wallet with a new one with the specified key.\\n\\n## save\\n\\n\`save()\` method allows you to save your wallet by request.\\n\\nNo input.\\nNo output in case of success.\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"save\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.save().then(() => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->save();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.save()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.Save()\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{}\\n}\\n\`\`\`\\n\\n## getViewKey\\n\\n\`getViewKey()\` method returns your view key.\\n\\nNo input.\\n\\n**Output**\\n\\n| Argument      | Description      | Format |\\n| ------------- | ---------------- | ------ |\\n| viewSecretKey | Private view key | string |\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getViewKey\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getViewKey().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->getViewKey();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.get_view_key()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.GetViewKey()\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"viewSecretKey\\":\\"xxxxx...\\"\\n  }\\n}\\n\`\`\`\\n\\n## getSpendKeys\\n\\n\`getSpendKeys()\` method returns your spend keys.\\n\\n**Input**\\n\\n| Argument | Mandatory | Description                                 | Format |\\n| -------- | --------- | ------------------------------------------- | ------ |\\n| address  | Yes       | Valid address that exists in this container | string |\\n\\n**Output**\\n\\n| Argument       | Description       | Format |\\n| -------------- | ----------------- | ------ |\\n| spendSecretKey | Private spend key | string |\\n| spendPublicKey | Public spend key  | string |\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getSpendKeys\\",\\"params\\":{\\"address\\":\\"TRTLxxxx...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getSpendKeys({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$address = 'TRTLxxxx...';\\n$response = $catalystService->getSpendKeys($address);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddress = 'TRTLxxxx...'\\nresponse = walletd.get_spend_keys(address)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddress := \\"TRTLxxxx...\\"\\nresponse, err := service.GetSpendKeys(address)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"spendSecretKey\\":\\"xxxxx...\\",\\n    \\"spendPublicKey\\":\\"xxxxx...\\"\\n  }\\n}\\n\`\`\`\\n\\n## getMnemonicSeed\\n\\n\`getMnemonicSeed()\` method returns the mnemonic seed for the given _deterministic_ address. A mnemonic seed is a list of words which can be used to recover a wallet.\\n\\n**Input**\\n\\n| Argument | Mandatory | Description                                               | Format |\\n| -------- | --------- | --------------------------------------------------------- | ------ |\\n| address  | Yes       | Valid deterministic address that exists in this container | string |\\n\\n**Output**\\n\\n| Argument     | Description   | Format |\\n| ------------ | ------------- | ------ |\\n| mnemonicSeed | Mnemonic seed | string |\\n\\n> **Note:** The first wallet address that is generated when the container is created is the deterministic address. Only one wallet from a multi-wallet container can be deterministic. If a non-deterministic address is given, the RPC response will be an error with the message: \\"Keys not deterministic.\\"\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getMnemonicSeed\\",\\"params\\":{\\"address\\":\\"TRTLxxxx...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getMnemonicSeed({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$address = 'TRTLxxxx...';\\n$response = $catalystService->getMnemonicSeed($address);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddress = 'TRTLxxxx...'\\nresponse = walletd.get_mnemonic_seed(address)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddress := \\"TRTLxxxx...\\"\\nresponse, err := service.GetMnemonicSeed(address)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"mnemonicSeed\\":\\"catalyst are cool...\\"\\n  }\\n}\\n\`\`\`\\n\\n## getStatus\\n\\n\`getStatus()\` method returns information about the current RPC Wallet state: block count, known block count, last block hash and peer count.\\n\\nNo input.\\n\\n**Output**\\n\\n| Argument        | Description                                                                | Format |\\n| --------------- | -------------------------------------------------------------------------- | ------ |\\n| blockCount      | Node's known number of blocks                                              | int    |\\n| knownBlockCount | Maximum known number of blocks of all seeds that are connected to the node | int    |\\n| lastBlockHash   | Hash of the last known block                                               | string |\\n| peerCount       | Connected peers number                                                     | int    |\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getStatus\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getStatus().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->getStatus();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.get_status()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.GetStatus()\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"blockCount\\":455956,\\n    \\"knownBlockCount\\":455955,\\n    \\"lastBlockHash\\":\\"8d6f8...\\",\\n    \\"peerCount\\":8\\n  }\\n}\\n\`\`\`\\n\\n## getAddresses\\n\\n\`getAddresses()\` method returns an array of your RPC Wallet's addresses.\\n\\nNo input.\\n\\n**Output**\\n\\n| Argument  | Description                                       | Format |\\n| --------- | ------------------------------------------------- | ------ |\\n| addresses | Array of strings, where each string is an address | array  |\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getAddresses\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getAddresses().then((result) => {\\n  // do something\\n}).catch((error) => {\\n  //do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->getAddresses();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.get_addresses()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.GetAddresses()\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"addresses\\":[\\n      \\"TRTLxxxx...\\",\\n      \\"TRTLxxxx...\\"\\n    ]\\n  }\\n}\\n\`\`\`\\n\\n## createAddress\\n\\n\`createAddress()\` method creates an additional address in your wallet.\\n\\n**Input**\\n\\n| Argument       | Mandatory | Description                                                                                                                                                                                | Format |\\n| -------------- | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | ------ |\\n| spendSecretKey | No        | Private spend key. If \`spendSecretKey\` was specified, RPC Wallet creates spend address                                                                                                     | string |\\n| spendPublicKey | No        | Public spend key. If \`spendPublicKey\` was specified, RPC Wallet creates view address                                                                                                       | string |\\n| newAddress     | No        | Is this a new address being created? If so, blocks before the creation timestamp will not be scanned. Defaults to true if neither keys are given, as it is guaranteed to be a new address. | bool   |\\n| scanHeight     | No        | The height to begin scanning for transactions at. Only applies if a public/secret key is supplied. This can greatly speed up wallet syncing time.                                          | int    |\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"createAddress\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.createAddress({\\n  spendSecretKey: '',\\n  spendPublicKey: ''\\n}).then((result) => {\\n  // do something\\n}).catch((error) => {\\n  //do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$spendSecretKey = null;\\n$spendPublicKey = null;\\n$response = $catalystService->createAddress($spendSecretKey, $spendPublicKey);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nspend_secret_key = ''\\nspend_public_key = ''\\nresponse = walletd.create_address(spend_secret_key, spend_public_key)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nspendSecretKey := \\"\\"\\nspendPublicKey := \\"\\"\\nscanHeight := 850000\\nnewAddress := true\\nresponse, err := service.CreateAddress(spendSecretKey, spendPublicKey, scanHeight, newAddress)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"address\\":\\"TRTLxxxx...\\"\\n  }\\n}\\n\`\`\`\\n\\n## deleteAddress\\n\\n\`deleteAddress()\` method deletes a specified address.\\n\\n**Input**\\n\\n| Argument | Mandatory | Description              | Format |\\n| -------- | --------- | ------------------------ | ------ |\\n| address  | Yes       | An address to be deleted | string |\\n\\n**Output**\\n\\nIn case of success returns an empty JSON object.\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"deleteAddress\\",\\"params\\":{\\"address\\":\\"TRTLxxxx...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.deleteAddress({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$address = 'TRTLxxxx...';\\n$response = $catalystService->deleteAddress($address);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddress = 'TRTLxxxx...'\\nresponse = walletd.delete_address(address)\\n\\n# If the delete was successful, response will be True\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddress := \\"TRTLxxxx...\\"\\nresponse, err := service.DeleteAddress(address)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{}\\n}\\n\`\`\`\\n\\n## getBalance\\n\\n\`getBalance()\` method returns a balance for a specified address.\\n\\n**Input**\\n\\n| Argument | Mandatory | Description                                 | Format |\\n| -------- | --------- | ------------------------------------------- | ------ |\\n| address  | No        | Valid address that exists in this container | string |\\n\\n**Output**\\n\\n| Argument         | Description                                          | Format |\\n| ---------------- | ---------------------------------------------------- | ------ |\\n| availableBalance | Available balance of the specified address in shells | int    |\\n| lockedAmount     | Locked amount of the specified address in shells     | int    |\\n\\n> **Note:** If an address is not specified, \`getBalance()\` returns a cumulative balance of all RPC Wallet's addresses.\\n\\n> **Note:** Balances are expressed in shells, so a balance of 10000 is equal to 100.00 TRTL\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getBalance\\",\\"params\\":{\\"address\\":\\"TRTLxxxx...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\n// Address optional\\nservice.getBalance({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$address = 'TRTLxxxx...';\\n$response = $catalystService->getBalance($address);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddress = 'TRTLxxxx...'\\nresponse = walletd.get_balance(address)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddress := \\"TRTLxxxx...\\"\\nresponse, err := service.GetBalance(address)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"availableBalance\\":10000,\\n    \\"lockedAmount\\":0\\n  }\\n}\\n\`\`\`\\n\\n## getBlockHashes\\n\\n\`getBlockHashes()\` method returns an array of block hashes for a specified block range.\\n\\n**Input**\\n\\nArgument         | Mandatory    | Description                                     | Format\\n---------------- | ------------ | ----------------------------------------------- | -------\\nfirstBlockIndex  | Yes          | Starting height\\t                                | int\\nblockCount       | Yes          | Number of blocks to process\\t\\t                  | int\\n\\n**Output**\\n\\nArgument              | Description                                             | Format\\n--------------------- | ------------------------------------------------------- | ------\\nblockHashes\\t\\t      | Array of strings, where each element is a block hash\\t    | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getBlockHashes\\",\\"params\\":{\\"firstBlockIndex\\":0,\\"blockCount\\":3}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getBlockHashes({\\n  firstBlockIndex: 500000,\\n  blockCount: 10\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$firstBlockIndex = 0;\\n$blockCount = 3;\\n$response = $catalystService->getBlockHashes($firstBlockIndex, $blockCount);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nfirst_block_index = 0\\nblock_count = 3\\nresponse = walletd.get_block_hashes(first_block_index, block_count)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nfirstBlockIndex := 0\\nblockCount := 3\\nresponse, err := service.GetBlockHashes(firstBlockIndex, blockCount)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"blockHashes\\":[\\n      \\"7fb97...\\",\\n      \\"8c973...\\",\\n      \\"2ef06...\\"\\n    ]\\n  }\\n}\\n\`\`\`\\n\\n## getTransactionHashes\\n\\n\`getTransactionHashes()\` method returns an array of block and transaction hashes. A transaction consists of transfers.\\nA transfer is an amount-address pair. There could be several transfers in a single transaction.\\n\\n**Input**\\n\\nArgument         | Mandatory                                                                | Description                                                   | Format\\n---------------- | ------------------------------------------------------------------------ | ------------------------------------------------------------- | -------\\naddresses        | No                                                                       | Array of strings, where each string is an address\\t            | array\\nblockHash        | Only one of these parameters (blockHash or firstBlockIndex) is allowed   | Hash of the starting block                                    | string\\nfirstBlockIndex  | Only one of these parameters (blockHash or firstBlockIndex) is allowed   | Starting height\\t                                            | int\\nblockCount       | Yes                                                                      | Number of blocks to return transaction hashes from\\t        | int\\npaymentId        | No                                                                       | Valid payment ID (64char hex string)\\t                        | string\\n\\n* If \`paymentId\` parameter is set, \`getTransactionHashes()\` method returns transaction hashes of transactions that contain specified payment ID in the given block range.\\n* If \`addresses\` parameter is set, \`getTransactionHashes()\` method returns transaction hashes of transactions that contain transfer from at least one of specified addresses.\\n* If both above mentioned parameters are set, \`getTransactionHashes()\` method returns transaction hashes of transactions that contain both specified payment ID and transfer from at least one of specified addresses.\\n\\n**Output**\\n\\nArgument   | Description                                         |                                                              |            |\\n---------- | --------------------------------------------------- | ------------------------------------------------------------ | ---------- |\\nitems\\t   | **Array of**                                        |\\t                                                            |            |\\n    \\t   | **Attribute**            \\t                         | **Description**                                              | **Format** |\\n           | blockHash                                           | Hash of the block which contains transaction hashes          | string     |\\n           | transactionHashes                                   | Array of strings, where each string is a transaction hash    | array      |\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getTransactionHashes\\",\\"params\\":{\\"firstBlockIndex\\":400000,\\"blockCount\\":100000}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getTransactionHashes({\\n  addresses: [\\n    \\"TRTLux9QBmzCYEGgdWXHEQCAm6vY9vZHkbGmx8ev5LxhYk8N71Pp7PWFYL9CHxpWph2wCPZcJ6tkPfUxVZcUN8xmYsSDJZ25i9n\\",\\n    \\"TRTLv1mPerM2ckUuNvxrkzDE7QKd9PFVUXYbVfbvx8YxB5BYEdSqQvUFYL9CHxpWph2wCPZcJ6tkPfUxVZcUN8xmYsSDJbQMVgF\\"\\n  ],\\n  blockHash: 'f98d6bbe80a81b3aa0aebd004096e2223524f58f347a1f21be122450f244b948',\\n  blockCount: 1\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$blockCount = 100000;\\n$firstBlockIndex = 400000;\\n$blockHash = null;\\n$addresses = null;\\n$paymentId = null;\\n\\n$response = $catalystService->getTransactionHashes(\\n    $blockCount, $firstBlockIndex, $blockHash, $addresses, $paymentId\\n);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nblock_count = 100000\\nblock_hash = '6c285...'\\naddresses = []\\npayment_id = ''\\n\\nresponse = walletd.get_transaction_hashes(addresses, block_hash, block_count, payment_id)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddresses := []string{\\"TRTLxxxx...\\"}\\nblockHash := \\"\\"\\nfirstBlockIndex := 0\\nblockCount := 3\\npaymentID := \\"\\"\\nresponse, err := service.GetTransactionHashes(addresses, blockHash, firstBlockIndex, blockCount, paymentID)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"items\\":[\\n      {\\n        \\"blockHash\\":\\"f0d8c...\\",\\n        \\"transactionHashes\\":[\\"529ea...\\"]\\n      },\\n      {\\n        \\"blockHash\\":\\"4a1ae...\\",\\n        \\"transactionHashes\\":[\\"2e709...\\"]\\n      }\\n    ]\\n  }\\n}\\n\`\`\`\\n\\n## getTransactions\\n\\n\`getTransactions()\` method returns an array of block and transaction hashes.\\nA transaction consists of transfers. A transfer is an amount-address pair. There could be several transfers in a single transaction.\\n\\n**Input**\\n\\nArgument        | Mandatory                                                                    | Description                                            | Format\\n--------------- | ---------------------------------------------------------------------------- | ------------------------------------------------------ | -------\\naddresses       | No                                                                           | Array of strings, where each string is an address\\t\\t| array\\nblockHash       | Only one of these parameters (\`blockHash\` or \`firstBlockIndex\`) is allowed.  | Hash of the starting block\\t\\t                        | string\\nfirstBlockIndex | Only one of these parameters (\`blockHash\` or \`firstBlockIndex\`) is allowed.  | Starting height >0 (1,2,3...)\\t\\t                    | int\\nblockCount      | Yes                                                                          | Number of blocks to return transaction hashes from\\t\\t| int\\npaymentId       | No                                                                           | Valid payment ID (64char hex string)                   | string\\n\\n* If \`paymentId\` parameter is set, \`getTransactions()\` method returns transactions that contain specified payment ID in the given block range.\\n* If \`addresses\` parameter is set, \`getTransactions()\` method returns transactions that contain transfer from at least one of specified addresses.\\n* If both above mentioned parameters are set, \`getTransactions()\` method returns transactions that contain both specified payment ID and transfer from at least one of specified addresses.\\n\\n**Output**\\n\\nArgument   |                              | Description                                       | Format\\n---------- | ---------------------------- | --------------------------------------------------|-----------\\nitems\\t   | **Array of**                 |                                                   |\\n    \\t   | block_hash                   | hash of the block which contains a transaction    | string\\n    \\t   | transactions                 | see below                                         | array\\n\\nTransaction attributes:\\n\\nArgument            | Description                                       | Format\\n------------------- | --------------------------------------------------|-----------\\ntransactionHash     | Hash of the transaction                                                       | string\\nblockIndex          | Number of the block that contains a transaction                               | int\\ntimestamp           | Timestamp of the transaction                                                  | int\\nisBase              | Shows if the transaction is a CoinBase transaction or not                     | boolean\\nunlockTime          | Height of the block when transaction is going to be available for spending    | int\\namount              | Amount of the transaction                                                     | int\\nfee                 | Transaction fee                                                               | int\\nextra               | Hash of the  transaction                                                      | string\\npaymentId           | Payment ID of the transaction (optional) (64char hex string)                  | string\\ntransfers           | Array of address (string), amount (int)                                       | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getTransactions\\",\\"params\\":{\\"firstBlockIndex\\":400000,\\"blockCount\\":100000}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getTransactions({\\n  addresses: [\\n    \\"TRTLux9QBmzCYEGgdWXHEQCAm6vY9vZHkbGmx8ev5LxhYk8N71Pp7PWFYL9CHxpWph2wCPZcJ6tkPfUxVZcUN8xmYsSDJZ25i9n\\",\\n    \\"TRTLv1mPerM2ckUuNvxrkzDE7QKd9PFVUXYbVfbvx8YxB5BYEdSqQvUFYL9CHxpWph2wCPZcJ6tkPfUxVZcUN8xmYsSDJbQMVgF\\"\\n  ],\\n  firstBlockIndex: 469419,\\n  blockCount: 1\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$blockCount = 100000;\\n$firstBlockIndex = 400000;\\n$blockHash = null;\\n$addresses = null;\\n$paymentId = null;\\n\\n$response = $catalystService->getTransactions(\\n    $blockCount, $firstBlockIndex, $blockHash, $addresses, $paymentId\\n);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nblock_count = 100000\\nblock_hash = '6c285...'\\naddresses = []\\npayment_id = ''\\n\\nresponse = walletd.get_transactions(addresses, block_hash, block_count, payment_id)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddresses := []string{\\"TRTLxxxx...\\"}\\nblockHash := \\"\\"\\nfirstBlockIndex := 0\\nblockCount := 3\\npaymentID := \\"\\"\\nresponse, err := service.GetTransactions(addresses, blockHash, firstBlockIndex, blockCount, paymentID)\\nif err != nil {\\n  fmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"items\\":[\\n      {\\n        \\"blockHash\\":\\"f0d8c...\\",\\n        \\"transactions\\":[\\n          {\\n            \\"amount\\":10000,\\n            \\"blockIndex\\":456018,\\n            \\"extra\\":\\"01bd0...\\",\\n            \\"fee\\":10,\\n            \\"isBase\\":false,\\n            \\"paymentId\\":\\"b6fc6...\\",\\n            \\"state\\":0,\\n            \\"timestamp\\":1526458339,\\n            \\"transactionHash\\":\\"529ea...\\",\\n            \\"transfers\\":[\\n              {\\"address\\":\\"TRTLxxxx...\\",\\"amount\\":10000,\\"type\\":0},\\n              {\\"address\\":\\"\\",\\"amount\\":-100000,\\"type\\":0},\\n              {\\"address\\":\\"\\",\\"amount\\":89990,\\"type\\":0}\\n            ],\\n            \\"unlockTime\\":0\\n          }\\n        ]\\n      },\\n      {\\n        \\"blockHash\\":\\"4a1ae...\\",\\n        \\"transactions\\":[\\n          {\\n            \\"amount\\":5000,\\n            \\"blockIndex\\":456076,\\n            \\"extra\\":\\"018c1...\\",\\n            \\"fee\\":10,\\n            \\"isBase\\":false,\\n            \\"paymentId\\":\\"55255...\\",\\n            \\"state\\":0,\\n            \\"timestamp\\":1526460243,\\n            \\"transactionHash\\":\\"2e709...\\",\\n            \\"transfers\\":[\\n              {\\"address\\":\\"TRTLxxxx...\\",\\"amount\\":5000,\\"type\\":0},\\n              {\\"address\\":\\"\\",\\"amount\\":-8000,\\"type\\":0},\\n              {\\"address\\":\\"\\",\\"amount\\":2990,\\"type\\":0}\\n            ],\\n            \\"unlockTime\\":0\\n          }\\n        ]\\n      }\\n    ]\\n  }\\n}\\n\`\`\`\\n\\n## getUnconfirmedTransactionHashes\\n\\n\`getUnconfirmedTransactionHashes()\` method returns information about the current unconfirmed transaction pool or for a specified addresses.\\n\\nTransaction consists of transfers. Transfer is an amount-address pair. There could be several transfers in a single transaction.\\n\\n**Input**\\n\\nArgument    | Mandatory     | Description                                                | Format\\n----------- | ------------- | ---------------------------------------------------------- | -------\\naddresses   | No            | Array of strings, where each string is a valid address     | array\\n\\n> **Note:** If addresses parameter is set, transactions that contain transfer from at least one of specified addresses are returned.\\n\\n**Output**\\n\\nArgument               | Description                                                                    | Format\\n---------------------- | ------------------------------------------------------------------------------ | ------\\ntransactionHashes      | Array of strings, where each string is a hash of an unconfirmed transaction\\t  | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getUnconfirmedTransactionHashes\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getUnconfirmedTransactionHashes({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$addresses = null;\\n$response = $catalystService->getUnconfirmedTransactionHashes($addresses);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddresses = []\\nresponse = walletd.get_unconfirmed_transaction_hashes(addresses)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddresses := []string{\\"TRTLxxxx...\\"}\\nresponse, err := service.GetUnconfirmedTransactionHashes(addresses)\\nif err != nil {\\n\\t\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transactionHashes\\":[\\n      \\"55a23...\\"\\n    ]\\n  }\\n}\\n\`\`\`\\n\\n## getTransaction\\n\\n\`getTransaction()\` method returns information about a particular transaction.\\n\\nTransaction consists of transfers. Transfer is an amount-address pair. There could be several transfers in a single transaction.\\n\\n**Input**\\n\\nArgument            | Mandatory     | Description                                                | Format\\n------------------- | ------------- | ---------------------------------------------------------- | -------\\ntransactionHash     | Yes           | Hash of the requested transaction                          | string\\n\\n**Output**\\n\\nArgument   | Description\\n---------- | ------------\\ntransaction| see below\\n\\nTransaction attributes:\\n\\nArgument            | Description                                                                   | Format\\n------------------- | ------------------------------------------------------------------------------|-------\\ntransactionHash     | Hash of the transaction                                                       | string\\nblockIndex          | Number of the block that contains a transaction                               | int\\ntimestamp           | Timestamp of the transaction                                                  | int\\nisBase              | Shows if the transaction is a CoinBase transaction or not                     | boolean\\nunlockTime          | Height of the block when transaction is going to be available for spending    | int\\namount              | Amount of the transaction                                                     | int\\nfee                 | Transaction fee                                                               | int\\nextra               | Hash of the  transaction                                                      | string\\npaymentId           | Payment ID of the transaction (optional)  (64char hex string)                 | string\\ntransfers           | Array of addresses (string), amount (int)                                     | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getTransaction\\",\\"params\\":{\\"transactionHash\\":\\"55a23...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getTransaction({\\n  transactionHash: 'd01e448f7b631cebd989e3a150258b0da59c66f96adecec392bbf61814310751'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$transactionHash = '55a23...';\\n$response = $catalystService->getTransaction($transactionHash);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\ntransaction_hash = '55a23...'\\nresponse = walletd.get_transaction(transaction_hash)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\ntransactionHash := \\"55a23...\\"\\nresponse, err := service.GetTransaction(transactionHash)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transaction\\":{\\n      \\"amount\\":5000,\\n      \\"blockIndex\\":456635,\\n      \\"extra\\":\\"0134b...\\",\\n      \\"fee\\":10,\\n      \\"isBase\\":false,\\n      \\"paymentId\\":\\"ac9c5...\\",\\n      \\"state\\":0,\\n      \\"timestamp\\":1526477499,\\n      \\"transactionHash\\":\\"55a23...\\",\\n      \\"transfers\\":[\\n        {\\"address\\":\\"TRTLxxxx...\\",\\"amount\\":5000,\\"type\\":0},\\n        {\\"address\\":\\"\\",\\"amount\\":-10000,\\"type\\":0},\\n        {\\"address\\":\\"\\",\\"amount\\":4990,\\"type\\":0}\\n      ],\\n      \\"unlockTime\\":0\\n    }\\n  }\\n}\\n\`\`\`\\n\\n## sendTransaction\\n\\n\`sendTransaction()\` method allows you to send transaction(s) to one or several addresses. Also, it allows you to use a payment ID for a transaction to a single address.\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description                                                                              | Format\\n--------------- | ------------- | ---------------------------------------------------------------------------------------- | -------\\naddresses       | No            | Array of strings, where each string is an address to take the funds from                 | array\\ntransfers       | Yes           | Array of objects, address: (string address), amount: (int amount)                        | array\\nfee             | Yes           | Transaction fee. Minimal fee in Catalyst network is .001CX. | int\\nunlockTime      | No            | The block height at which the transaction will be unlocked for spending.                 | int\\nanonymity       | Yes           | Privacy (mixin) level from block 800,000 three (3)                                       | int\\nextra           | No            | String of variable length. Can contain A-Z, 0-9 characters.                              | string\\npaymentId       | No            | Payment ID (64char hex string)                                                           | string\\nchangeAddress   | No            | Valid and existing address in this container.                                            | string\\n\\n* If container contains only 1 address, \`changeAddress\` field can be left empty and the change is going to be sent to this address.\\n* If addresses field contains only 1 address, \`changeAddress\` can be left empty and the change is going to be sent to this address.\\n* In the rest of the cases, \`changeAddress\` field is mandatory and must contain an address.\\n\\n**Output**\\n\\nArgument              | Description                         | Format\\n--------------------- | ----------------------------------- | ------\\ntransactionHash\\t      | Hash of the sent transaction\\t\\t    | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"sendTransaction\\",\\"params\\":{\\"transfers\\":[{\\"address\\":\\"TRTLxxxx...\\",\\"amount\\":5000}],\\"fee\\":10,\\"anonymity\\":3,\\"changeAddress\\":\\"TRTLyyyy...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.sendTransaction({\\n  transfers: [\\n    service.newTransfer('TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ', 1000000)\\n  ],\\n  fee: 0.1\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$anonymity = 3;\\n$fee = 10;\\n$addresses = null;\\n$unlockTime = null;\\n$extra = null;\\n$paymentId = null;\\n$changeAddress = 'TRTLyyyy...';\\n\\n$transfers = [\\n    [\\"address\\" => \\"TRTLxxxx...\\", \\"amount\\"  => 5000],\\n];\\n\\n$response = $catalystService->sendTransaction(\\n    $anonymity, $transfers, $fee, $addresses, $unlockTime, $extra, $paymentId, $changeAddress\\n);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nanonymity = 3\\nfee = 10\\naddresses = []\\nunlock_time = 0\\nextra = ''\\npayment_id = ''\\nchange_address = 'TRTLyyyy...'\\n\\ntransfers = [\\n    {\\"address\\" : \\"TRTLxxxx...\\", \\"amount\\" : 5000},\\n]\\n\\nresponse = walletd.send_transaction(\\n    transfers, anonymity, fee, addresses, change_address, extra, payment_id, unlock_time\\n)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddresses := []string{\\"TRTLyyyy...\\"} // can be empty\\nunlockTime := 0\\nextra := \\"\\"\\npaymentID := \\"\\"\\nfee := 10\\nchangeAddress := \\"TRTLyyyy...\\"\\n\\ntransfers := []map[string]interface{}{\\n  {\\n    \\"address\\" : \\"TRTLxxxx...\\",\\n    \\"amount\\" : 5000,\\n  },\\n}\\n\\nresponse, err := service.SendTransaction(addresses, transfers, fee, unlockTime, extra, paymentID, changeAddress)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transactionHash\\":\\"ae57e...\\"\\n  }\\n}\\n\`\`\`\\n\\n## createDelayedTransaction\\n\\n\`createDelayedTransaction()\` method creates a delayed transaction. Such transactions are not sent into the network automatically and should be pushed using \`sendDelayedTransaction\` method.\\n\\n**Input**\\n\\nArgument        | Mandatory     | Description                                                                              | Format\\n--------------- | ------------- | ---------------------------------------------------------------------------------------- | -------\\naddresses       | No            | Array of strings, where each string is an address                                        | array\\ntransfers       | Yes           | Array of address (string), amount (int)                                                  | array\\nfee             | Yes           | Transaction fee. Minimal fee in Catalyst network is .001CX. This parameter should be specified in minimal available CX units. | int\\nunlockTime      | No\\t        | Height of the block until which transaction is going to be locked for spending.\\t       | int\\nanonymity       | Yes           | Privacy (mixin) level from block 800,000 three (3)                                       | int\\nextra           | No            | String of variable length. Can contain A-Z, 0-9 characters.                              | string\\npaymentId       | No            | Payment ID  (64char hex string)                                                          | string\\nchangeAddress   | No            | Valid and existing in this container address.                                            | string\\n\\n* If container contains only 1 address, \`changeAddress\` field can be left empty and the change is going to be sent to this address\\n* If addresses field contains only 1 address, \`changeAddress\` can be left empty and the change is going to be sent to this address\\n* In the rest of the cases, \`changeAddress\` field is mandatory and must contain an address.\\n* Outputs that were used for this transactions will be locked until the transaction is sent or cancelled\\n\\n**Output**\\n\\nArgument              | Description                         | Format\\n--------------------- | ----------------------------------- | ------\\ntransactionHash\\t      | Hash of the sent transaction\\t\\t    | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"createDelayedTransaction\\",\\"params\\":{\\"transfers\\":[{\\"address\\":\\"TRTLxxxx...\\",\\"amount\\":5000}],\\"fee\\":10,\\"anonymity\\":3,\\"changeAddress\\":\\"TRTLyyyy...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.createDelayedTransaction({\\n  transfers: [\\n    service.newTransfer('TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ', 1000000)\\n  ],\\n  fee: 0.1\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$anonymity = 3;\\n$fee = 10;\\n$addresses = null;\\n$unlockTime = null;\\n$extra = null;\\n$paymentId = null;\\n$changeAddress = 'TRTLyyyy...';\\n\\n$transfers = [\\n    [\\"address\\" => \\"TRTLxxxx...\\", \\"amount\\"  => 5000],\\n];\\n\\n$response = $catalystService->createDelayedTransaction(\\n    $anonymity, $transfers, $fee, $addresses, $unlockTime, $extra, $paymentId, $changeAddress\\n);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nanonymity = 3\\nfee = 10\\naddresses = []\\nunlock_time = 0\\nextra = ''\\npayment_id = ''\\nchange_address = 'TRTLyyyy...'\\n\\ntransfers = [\\n    {\\"address\\" : \\"TRTLxxxx...\\", \\"amount\\" : 5000},\\n]\\n\\nresponse = walletd.create_delayed_transaction(\\n    transfers, anonymity, fee, addresses, change_address, extra, payment_id, unlock_time\\n)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddresses := []string{\\"TRTLyyyy...\\"} // can be empty\\nunlockTime := 0\\nextra := \\"\\"\\npaymentID := \\"\\"\\nfee := 10\\nchangeAddress := \\"TRTLyyyy...\\"\\n\\ntransfers := []map[string]interface{}{\\n  {\\n    \\"address\\" : \\"TRTLxxxx...\\",\\n    \\"amount\\" : 5000,\\n  },\\n}\\n\\nresponse, err := service.CreateDelayedTransaction(addresses, transfers, fee, unlockTime, extra, paymentID, changeAddress)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transactionHash\\":\\"ae57e...\\"\\n  }\\n}\\n\`\`\`\\n\\n## getDelayedTransactionHashes\\n\\n\`getDelayedTransactionHashes()\` method returns hashes of delayed transactions.\\n\\nNo input.\\n\\n**Output**\\n\\nArgument              | Description                                                     | Format\\n--------------------- | --------------------------------------------------------------- | ------\\ntransactionHashes\\t  | Array of strings, where each string is a transaction hash\\t\\t      | array\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getDelayedTransactionHashes\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getDelayedTransactionHashes().then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->getDelayedTransactionHashes();\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.get_delayed_transaction_hashes()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.GetDelayedTransactionHashes()\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transactionHashes\\":[\\"b3e374...\\"]\\n  }\\n}\\n\`\`\`\\n\\n## deleteDelayedTransaction\\n\\n\`deleteDelayedTransaction()\` method deletes a specified delayed transaction.\\n\\n**Input**\\n\\nArgument              | Mandatory      | Description                              | Format\\n--------------------- | -------------- | ---------------------------------------- | -------\\ntransactionHash       | Yes            | Valid, existing delayed transaction      | string\\n\\n**Output**\\n\\nIn case of success returns an empty JSON object.\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"deleteDelayedTransaction\\",\\"params\\":{\\"transactionHash\\":\\"b3e37...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.deleteDelayedTransaction({\\n  transactionHash: 'd01e448f7b631cebd989e3a150258b0da59c66f96adecec392bbf61814310751'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$transactionHash = 'b3e37...';\\n$response = $catalystService->deleteDelayedTransaction($transactionHash);\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\ntransaction_hash = '50d83...'\\nresponse = walletd.delete_delayed_transaction(transaction_hash)\\n\\n# If delete is successful, the response will be True\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\ntransactionHash := \\"50d83...\\"\\nresponse, err := service.DeleteDelayedTransaction(transactionHash)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{}\\n}\\n\`\`\`\\n\\n## sendDelayedTransaction\\n\\n\`sendDelayedTransaction()\` method sends a specified delayed transaction.\\n\\n**Input**\\n\\nArgument              | Mandatory      | Description                              | Format\\n--------------------- | -------------- | ---------------------------------------- | -------\\ntransactionHash       | Yes            | Valid, existing delayed transaction      | string\\n\\n**Output**\\n\\nIn case of success returns an empty JSON object.\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"sendDelayedTransaction\\",\\"params\\":{\\"transactionHash\\":\\"c37cd...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.sendDelayedTransaction({\\n  transactionHash: 'd01e448f7b631cebd989e3a150258b0da59c66f96adecec392bbf61814310751'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$transactionHash = 'c37cd...';\\n$response = $catalystService->sendDelayedTransaction($transactionHash);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\ntransaction_hash = '50d83...'\\nresponse = walletd.send_delayed_transaction(transaction_hash)\\n\\n# If transaction is sent successful, the response will be True\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\ntransactionHash := \\"50d83...\\"\\nresponse, err := service.SendDelayedTransaction(transactionHash)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{}\\n}\\n\`\`\`\\n\\n## sendFusionTransaction\\n\\n\`sendFusionTransaction()\` method allows you to send a fusion transaction, by taking funds from selected addresses and\\ntransferring them to the destination address.\\nIf there aren't any outputs that can be optimized, \`sendFusionTransaction()\` will return an error. You can\\nuse \`estimateFusion\` to check the outputs, available for the optimization.\\n\\n**Input**\\n\\nArgument            | Mandatory  | Description                                                                                          | Format\\n------------------- | ---------- | ---------------------------------------------------------------------------------------------------- | -------\\nthreshold           | Yes        | Value that determines which outputs will be optimized. Only the outputs, lesser than the threshold value, will be included into a fusion transaction. | int\\nanonymity           | Yes        | Privacy (mixin) level from block 800,000 three (3)                                                 | int\\naddresses           | No         | Array of strings, where each string is an address to take the funds from.\\t                        | array\\ndestinationAddress  | No         | An address that the optimized funds will be sent to. Valid and existing in this container address.\\t| string\\n\\n* If container contains only 1 address, \`destinationAddress\` field can be left empty and the funds are going to be sent to this address.\\n* If addresses field contains only 1 address, \`destinationAddress\` can be left empty and the funds are going to be sent to this address.\\n* In the rest of the cases, \`destinationAddress\` field is mandatory and must contain an address.\\n\\n**Output**\\n\\nArgument              | Description                         | Format\\n--------------------- | ----------------------------------- | ------\\ntransactionHash\\t      | Hash of the sent transaction\\t\\t    | string\\n\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"sendFusionTransaction\\",\\"params\\":{\\"threshold\\":1000000,\\"anonymity\\":3,\\"addresses\\":[\\"TRTLxxxx...\\",\\"TRTLyyyy...\\"],\\"destinationAddress\\":\\"TRTLzzzz...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.sendFusionTransaction({\\n  destinationAddress: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$threshold = 1000000;\\n$anonymity = 3;\\n$addresses = ['TRTLxxxx...', 'TRTLyyyy...'];\\n$destinationAddress = 'TRTLzzzz...';\\n$response = $catalystService->sendFusionTransaction($threshold, $anonymity, $addresses, $destinationAddress);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nthreshold = 1000000\\nanonymity = 3\\naddresses = ['TRTLxxxx...', 'TRTLyyyy...']\\ndestination_address = 'TRTLzzzz...'\\nresponse = walletd.send_fusion_transaction(threshold, anonymity, addresses, destination_address)\\n\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nthreshold := 1000000\\naddresses := []string{\\"TRTLxxxx...\\", \\"TRTLyyyy...\\"}\\ndestinationAddress := \\"TRTLzzzz...\\"\\nresponse, err := service.SendfusionTransaction(threshold, addresses, destinationAddress)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"transactionHash\\":\\"93faed...\\"\\n  }\\n}\\n\`\`\`\\n\\n## estimateFusion\\n\\n\`estimateFusion()\` method counts the number of unspent outputs of the specified addresses and returns how many of those outputs can be optimized.\\nThis method is used to understand if a fusion transaction can be created. If \`fusionReadyCount\` returns a value = 0, then a fusion transaction cannot be created.\\n\\n**Input**\\n\\nArgument            | Mandatory  | Description                                                                                          | Format\\n------------------- | ---------- | ---------------------------------------------------------------------------------------------------- | -------\\nthreshold           | Yes        | Value that determines which outputs will be optimized. Only the outputs, lesser than the threshold value, will be included into a fusion transaction. | int\\naddresses           | No         | Array of strings, where each string is an address to take the funds from.\\t                        | string\\n\\n**Output**\\n\\nArgument            | Description                                                 | Format\\n------------------- | ----------------------------------------------------------- | ------\\ntotalOutputCount\\t  | Total number of unspent outputs of the specified addresses. | int\\nfusionReadyCount    | Number of outputs that can be optimized.                    | int\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"estimateFusion\\",\\"params\\":{\\"threshold\\":1000000,\\"addresses\\":[\\"TRTLxxxx...\\",\\"TRTLyyyy...\\"]}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.estimateFusion({\\n  threshold: 100000000,\\n  addresses:[\\n    'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ'\\n  ]\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$threshold = 1000000;\\n$addresses = ['TRTLxxxx...', 'TRTLyyyy...'];\\n$response = $catalystService->estimateFusion($threshold, $addresses);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nthreshold = 1000000\\naddresses = ['TRTLxxxx...', 'TRTLyyyy...']\\nresponse = walletd.estimate_fusion(threshold, addresses)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nthreshold := 1000000\\naddresses := []string{\\"TRTLxxxx...\\",\\"TRTLyyyy...\\"}\\nresponse, err := service.EstimateFusion(threshold, addresses)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\":1,\\n  \\"jsonrpc\\":\\"2.0\\",\\n  \\"result\\":{\\n    \\"fusionReadyCount\\":0,\\n    \\"totalOutputCount\\":8\\n  }\\n}\\n\`\`\`\\n\\n## createIntegratedAddress\\n\\n\`createIntegratedAddress()\` method allows you to create a combined address, containing a standard address and a paymentId, to be used in sendTransaction() or for supplying to a user, instead of using an address and paymentId as separate parameters. This is helpful to ensure users cannot forget to supply a payment Id.\\n\\n**Input**\\n\\nArgument              | Mandatory      | Description                           | Format\\n--------------------- | -------------- | ------------------------------------- | -------\\naddress               | Yes            | A valid address                       | string\\npaymentId             | Yes            | A valid paymentId (64char hex string) | string\\n\\n**Output**\\n\\nArgument              | Description                         | Format\\n--------------------- | ----------------------------------- | ------\\nintegratedAddress\\t    | The created integrated address\\t\\t  | string\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"createIntegratedAddress\\",\\"params\\":{\\"paymentId\\":\\"7FE73BD90EF05DEA0B5C15FC78696619C50DD5F2BA628F2FD16A2E3445B1922F\\", \\"address\\":\\"TRTLxxxx...\\"}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.createIntegratedAddress({\\n  address: 'TRTLv1pacKFJk9QgSmzk2LJWn14JGmTKzReFLz1RgY3K9Ryn7783RDT2TretzfYdck5GMCGzXTuwKfePWQYViNs4avKpnUbrwfQ',\\n  paymentId: '80ec855eef7df4bce718442cabe086f19dfdd0d03907c7768eddb8eca8c5a667'\\n}).then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$address = 'TRTLxxxx...';\\n$paymentId = '7FE73BD90EF05DEA0B5C15FC78696619C50DD5F2BA628F2FD16A2E3445B1922F';\\n$response = $catalystService->createIntegratedAddress($address, $paymentId);\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\naddress = 'TRTLxxxx...'\\npayment_id = '7FE73BD90EF05DEA0B5C15FC78696619C50DD5F2BA628F2FD16A2E3445B1922F'\\nresponse = walletd.create_integrated_address(address, payment_id)\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\naddress := \\"TRTLxxxx...\\"\\npaymentID := \\"7FE73BD90EF05DEA0B5C15FC78696619C50DD5F2BA628F2FD16A2E3445B1922F\\"\\nresponse, err := service.CreateIntegratedAddress(address, paymentID)\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\": 1,\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"result\\": {\\n    \\"integratedAddress\\": \\"TRTLxxx...\\"\\n  }\\n}\\n\`\`\`\\n\\n## getFeeInfo\\n\\n\`getFeeInfo()\` method retrieves the fee and address (if any) that that catalystd walletd is connecting to is using. This fee will automatically be added to any transactions sent by sendTransaction() or sendDelayedTransaction(). Note it does not apply to sendFusionTransaction().\\n\\nNo input.\\n\\n**Output**\\n\\nArgument              | Description                         | Format\\n--------------------- | ----------------------------------- | ------\\naddress               | The address of the node owner \\t\\t  | string\\namount                | The fee that will be sent to the node owners address with each transaction | int\\n\\n\\n\\n\\n\`\`\`bash\\ncurl -d '{\\"jsonrpc\\":\\"2.0\\",\\"id\\":1,\\"password\\":\\"passw0rd\\",\\"method\\":\\"getFeeInfo\\",\\"params\\":{}}' http://localhost:17280/json_rpc\\n\`\`\`\\n\\n\\n\`\`\`js\\nservice.getFeeInfo().then((result) => {\\n  // do something\\n})\\n\`\`\`\\n\\n\\n\`\`\`php\\n<?php\\n$response = $catalystService->getFeeInfo();\\n\\necho $response;\\n\`\`\`\\n\\n\\n\`\`\`py\\nresponse = walletd.get_fee_info()\\nprint(response)\\n\`\`\`\\n\\n\\n\`\`\`go\\nresponse, err := service.GetFeeInfo()\\nif err != nil {\\n\\tfmt.Println(err)\\n} else {\\n  fmt.Println(response)\\n}\\n\`\`\`\\n\\n\\n\\n#### Expected Output:\\n\\n\`\`\`json\\n{\\n  \\"id\\": 1,\\n  \\"jsonrpc\\": \\"2.0\\",\\n  \\"result\\": {\\n    \\"address\\": \\"TRTLxxx...\\",\\n    \\"amount\\": 5000\\n  }\\n}\\n\`\`\`\\n\\n## License\\n\\n[![Creative Commons License](/assets/cc-by-sa.png)](https://creativecommons.org/licenses/by-sa/3.0/)\\n\\nThe content in this document was originally written by the [Bytecoin (BCN) Developers](https://bytecoin.org/). It is licensed under the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/). The source material can be found at the [Bytecoin Wiki](https://github.com/bcndev/bytecoin).\\n\\nAlso of note, TurtleCoin developers have altered and adapted the content to suit our implementation of the API. This was done independently of the Bytecoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n\\nAlso of note, Catalyst developers have altered and adapted the content to suit our implementation of the API. This was done independently of the Bytecoin development team. They neither endorse or acknowledge our changes. Feel free to adopt or change our content as per the [CC BY SA 3.0 license](https://creativecommons.org/licenses/by-sa/3.0/) requirements.\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/catalyst-specs/pools/"
            },
            "headings": [
              {
                "value": "Pools List & Block Explorers"
              },
              {
                "value": "CX only pools"
              },
              {
                "value": "Merged mining with BTCMZ"
              },
              {
                "value": "Block Explorers"
              }
            ],
            "internal": {
              "contentDigest": "8b9c83fc7fa529e090d8bd3adbf7fa5e",
              "content": "# Pools List & Block Explorers\\n\\n\\n## CX only pools\\n\\n- [omega-pool](https://omega-pool.cryptocatalyst.net/)\\n- [spookypool.nl](http://spookypool.nl/CX)\\n- [wellgitu.xyz](http://pool.wellgitu.xyz/cx)\\n- [zeta-pool](https://zeta-pool.cryptocatalyst.net/)\\n\\n## Merged mining with BTCMZ\\n\\n- [semipool](https://webcx.semipool.com/)\\n- [bravo-pool](https://bravo-pool.cryptocatalyst.net/)\\n- [the-miners.de](http://the-miners.de/CX)\\n- [pool-charlie](https://pool-charlie.cryptocatalyst.net/)\\n\\n\\n## Block Explorers\\n\\n- [explorer.cryptocatalyst](https://explorer.cryptocatalyst.net/)\\n- [cxex.catalystcrypto](https://cxex.catalystcrypto.net/)\\n- [explorer.wellgitu](http://explorer.wellgitu.xyz/catalyst)\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/devs/"
            },
            "headings": [
              {
                "value": "Developers team & Contributors."
              },
              {
                "value": "Core devs."
              },
              {
                "value": "Friendly devs, who helped us to make <code class=\\"language-text\\">CX</code> better!"
              },
              {
                "value": "Community supporters:"
              }
            ],
            "internal": {
              "contentDigest": "afc532ee86eeb2fc19bfd4fb1430e7a5",
              "content": "# Developers team & Contributors.\\n\\n\\n## Core devs.\\n\\n- [Dirtybits](https://github.com/dirtybits): Graduated from an IT department of one of the biggest US\\nuniversities, worked at Google.\\nCurrently working as a DevOps(C++) developer in a well-known\\nUS company. He is very passionate about crypto, well oriented in\\ncrypto space in general, and also one of the contributors\\non the Turtlecoin Project.\\n\\n- [N8tb1t](https://github.com/n8tb1t): Has more than 10 years of experience working in big startups\\naround the world, served as a developer in the Israeli defense\\nforce, fluent in English, Hebrew and Russian,\\nhooked on crypto since 2016.\\nCurrently, working on the project full time.\\n\\n- **@TheGoldenSparrow**: is an old member of the crypto space community, thus prefer to stay anonymous, but those of you who know him, well aware that he is a very respectful member of the bitcointalk forum. @TheGoldenSparrow is an author of cat7 blog, where you can find an ample of technical information about Catalyst Network, he is currently representing Catalyst on various media platforms and helping the new members of the community on our Discord channel, where you can always find him..\\n\\n## Friendly devs, who helped us to make \`CX\` better!\\n- [Hooftly](https://github.com/CalexCore) AmityCoin\\n- [NinjaCoin-Master](https://github.com/NinjaCoin-Master) NinjaCoin\\n- [Lithy / リーチ](https://github.com/LithyRiolu) Lithe-Project\\n- [zpalmtree](https://github.com/zpalmtree) turtlecoin\\n- [LeinAd2k](https://github.com/LeinAd2k) NashCash\\n- [CapEtn](https://github.com/wrkzcoin) WRKZCoin\\n\\nAnd many others.\\n\\n## Community supporters:\\n\\n- @Synku\\n- @Chef\\n- @WicheR\\n- @Rachel\\n- @Valen\\n- @MunchieHigh420\\n- @xav\\n- @Brendyn\\n\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/links/"
            },
            "headings": [
              {
                "value": "Exchanges and useful links"
              },
              {
                "value": "Exchanges"
              },
              {
                "value": "Webwallets"
              },
              {
                "value": "CoinMarketCap and CoinGecko"
              },
              {
                "value": "BitcoinTalk"
              },
              {
                "value": "3D nodes map"
              },
              {
                "value": "Links"
              },
              {
                "value": "Analitics and Stats"
              },
              {
                "value": "Price Trackers"
              }
            ],
            "internal": {
              "contentDigest": "191056d3ba3ed5ec4467f28badfe5231",
              "content": "# Exchanges and useful links\\n\\n\\n## Exchanges\\n\\n- [TradeCX](https://tradecx.io/markets/cxbtc)\\n- [FCB CX/BTC](https://fcbaccount.com/fcb/exchange/CX/BTC)\\n- [FCB CX/LTC](https://fcbaccount.com/fcb/exchange/CX/LTC)\\n- [FCB CX/DOGE](https://fcbaccount.com/fcb/exchange/CX/DOGE)\\n\\n## Webwallets\\n\\nWe are now listed on SP web wallet, now miners can mine on Spookypool or any other pool directly to this web wallet and then withdraw to exchange. This will help people who don't want to deal with CLI wallets and blockchain sync.\\n\\n- [SpookyPool Webwallet](https://spookypool.nl/)\\n\\n\\n## CoinMarketCap and CoinGecko\\n\\nWe are working on getting catalyst listed on these platforms, though we need to fit some requirements before they add us. One of which is to be listed on more high volume exchanges.\\n\\n\\n- [CoinMarketCap](#coinmarketcap-and-coingecko)\\n- [CoinGecko](#coinmarketcap-and-coingecko)\\n\\n## BitcoinTalk\\n\\n- [BitcoinTalk EN](https://bitcointalk.org/index.php?topic=5081758.0)\\n- [BitcoinTalk RU](https://bitcointalk.org/index.php?topic=5180539.0)\\n\\n## 3D nodes map\\n\\n![3dmap](/links/images/3dmap.png)\\n\\n- [3D Map](https://map.cryptocatalyst.net)\\n- [GitHub](https://github.com/n8tb1t/catalyst-nodes-map)\\n\\n## Links\\n- [Website](https://www.cryptocatalyst.net/)\\n- [Community Blog](https://www.cat7.network/) by @TheGoldenSparrow.\\n- [GitHub](https://github.com/catalystdevelopment)\\n- [Funding System](https://funding.cryptocatalyst.net/)\\n- [Articles/Blog](https://medium.com/@CatalystNetwork)\\n- [Discord](https://discord.gg/byKYDyb)\\n- [Twitter](https://twitter.com/catalyst_CX)\\n- [Reddit](https://www.reddit.com/r/CatalystHub/)\\n- [Video manual](https://youtu.be/dBPS_qiGWDE)\\n\\n## Analitics and Stats\\n\\n- [MiningPoolStats](https://miningpoolstats.stream/catalyst)\\n- [CryptUnit](https://www.cryptunit.com/coin/CX)\\n\\n## Price Trackers\\n\\nYou can fallow the CX price on [Blockfolio](https://blockfolio.com/coin/CX)  — the logo is still old through\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/funding/"
            },
            "headings": [
              {
                "value": "Funding System"
              },
              {
                "value": "Why"
              },
              {
                "value": "About"
              }
            ],
            "internal": {
              "contentDigest": "802642afbf285574de88fd4a880cdb20",
              "content": "# Funding System\\n\\n\\n## Why\\nThe Catalyst Funding System was put in to action by members \\n\\n\\n### Test 3 Level\\nThe test 3 level\\n paragraph \\n action of the Catalyst Community. Our goal is to have our community members fund each other in order to help Catalyst grow.\\n\\n![funding](/funding/images/funding.png)\\n\\n## About\\nRight now, it’s still a work in progress, though you can access and test it yourself, and tell us your opinion. Feel free to create your own proposals, and contribute to the active ones.\\n\\nYou are probably asking yourself why, a small project, would ever need such a system? Let me explain!\\n\\nThe Catalyst Funding System was put into action in order to our community members fund each other and help Catalyst grow. It gives an excellent opportunity to independent developers and artists to contribute and to express themselves, and get their work appreciated in CX.\\n\\nThe platform already has a bunch of successfully funded projects, and we hope, that as time goes by more and more will follow.\\n"
            }
          }
        },
        {
          "node": {
            "fields": {
              "slug": "/current/devs/sponsors/"
            },
            "headings": [
              {
                "value": "Sponsors funding"
              }
            ],
            "internal": {
              "contentDigest": "e9c8539be39b1f3831d1e420bf8ae2f9",
              "content": "# Sponsors funding\\n\\nThe best thing that sponsors, of a decentralized project, can do is to provide transparency to its community about their financial movements.\\n\\nThat’s because people that may have inside information tend to act based on that and this can give outsiders the shaft. We don’t like the shaft.\\n\\nWe’ve decided to give full transparency, all project donations are totally public and can be traced through the funding system.\\n\\nSaying this, if you want to invest in Catalyst, and become a member of our community, we are always open for discussion.\\n"
            }
          }
        }
      ]
    }
  }
}`

const { docPagesDirectory } = require('../constants')

const versionHelper = require('../src/lib/versionHelper')

const versionDirectory = versionHelper.getPrefixedVersion('current')
const dir = `${docPagesDirectory}${versionDirectory}`
const outlinePath = `${dir}/outline.yaml`
const loadedOutline = jsyaml.safeLoad(readFileSync(outlinePath, 'utf8'))
const versionPath = join(docPagesDirectory, versionDirectory)

// loadedOutline.chapters.map(chapter => {
//   const chapterPath = join(versionPath, chapter.path)
//
//   const files = readdirSync(chapterPath)
//     .filter(file => file.endsWith('.md'))
//     .map(file => file.slice(0, -3))
//
//   chapter.items = chapter.items.filter(item => files.includes(item))
//
//   const items = [...new Set(chapter.items.concat(files))].map(file => {
//     const fileContent = fileContentHelper.getFileContent(chapterPath, file, true)
//     //       // console.log(chapter.title)
//     //       // console.log(join(chapterPath,file))
//     // const content = readFileSync(join(chapterPath,file), 'utf8')
//     const orig = fileContent.split('\n').slice()
//
//     const doc = []
//
//     for (let i = 0, l = orig.length; i < l; i += 1) {
//       // console.log(orig[i])
//       if (orig[i].match(/^#{1,2} (.*)$/gm)) {
//         const parentSlug = `/docs/${chapter.path}`
//         const chapterTitle = orig[i].replace(/^#{1,2}/, '').trim()
//         const slugger = new GithubSlugger()
//         doc.push({
//           parentTitle: chapter.title,
//           parentSlug,
//           chapterTitle,
//           chapterSlug: `${parentSlug}/${file}/#${slugger.slug(chapterTitle)}`.replace('/index', ''),
//           chapterContent: ''
//         })
//       } else {
//         doc[doc.length - 1].chapterContent += `${orig[i]}\n`
//       }
//     }
//
//     const md = doc.map(chapter => {
//       return {
//         ...chapter,
//         chapterContent: chapter.chapterContent.trim(),
//         contentSRC: createNodeId(chapter.chapterContent, 'docs')
//       }
//     })
//     // console.log(md[0])
//     md.forEach(el => {
//       // console.log('start el')
//       // console.log(el)
//       // console.log(el.content.trim())
//       // console.log(el.content.trim())
//       // console.log('end el')
//     })
//
//     // return fileProcessor.processFile(resolve(chapterPath), file)[0]
//   })
//
//   return { ...chapter, items }
// })

const flattenDocs = arr =>
  arr.map(({ node: { fields, headings, internal } }) => ({
    ...fields,
    ...internal,
    headings
  }))

const obj = JSON.parse(myContent)
const altContent = flattenDocs(obj.data.allMarkdownRemark.edges)

const newPages = altContent =>
  altContent
    .map(docPage => {
      const { content, slug, headings } = docPage
      const slugger = new GithubSlugger()

      return content
        .split(/^#{1,2} (.*)$/gm)
        .slice(1)
        .map(pageChapter => pageChapter.trim())
        .map((current, index, initialArray) => {
          if (index === 0 || index % 2 === 0) {
            const parentSlug = slug.replace(/current/, 'docs')
            const pageContent = initialArray[index + 1]
            const chapterSlug = `${parentSlug}#${slugger.slug(initialArray[index])}`

            return {
              objectID: createNodeId(`${chapterSlug}objectID`, 'docs'),
              parentSlug,
              parentTitle: headings[0].value,
              chapterSlug,
              chapterTitle: initialArray[index],
              contentDigest: createNodeId(`${pageContent + chapterSlug}content`, 'docs'),
              pageContent
            }
          }
        })
        .filter(value => typeof value !== 'undefined')
    })
    .flat()

const stripMarkdown = async object => {
  const newObject = await Promise.all(
    object.map(async element => {
      element.pageContent = (await remark()
        .use(strip)
        .process(element.pageContent)).toString()
      return element
    })
  )
  return newObject
}

stripMarkdown(newPages(altContent))

// console.log( clean(newPages(altContent)))

// return ({chapterTitle:initialArray[index], PageContent:initialArray[index+1]})
// console.log(pageChapters)
// const zz = []
// for (let index = 0, l = pageChapters.length; index < l; index += 2) {
//    zz.push({chapterTitle:pageChapters[index], PageContent:pageChapters[index+1]})
// }
